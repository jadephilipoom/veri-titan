include "decls.vad"

#verbatim

include "../code/vale.dfy"
include "../spec/rsa_ops.dfy"
include "decls.dfy"

include "../code/mul256_lemmas.dfy"

module mul256 {

import opened bv_ops
import opened vt_ops
import opened rsa_ops
import opened vt_consts
import opened vt_vale
import opened vt_decls
import opened mul256_lemmas

#endverbatim

procedure mul256_w30xw2()
    reads
        w2; w30;
    modifies
        w26; w27; wacc;
    ensures
        to_nat(seq(w27, w26)) == w2 * w30;
{
    ghost var p0 := uint256_qmul(w30, 0, w2, 0);
    ghost var p1 := uint256_qmul(w30, 1, w2, 0);
    ghost var p2 := uint256_qmul(w30, 0, w2, 1);
    ghost var p3 := uint256_qmul(w30, 2, w2, 0);
    ghost var p4 := uint256_qmul(w30, 1, w2, 1);
    ghost var p5 := uint256_qmul(w30, 0, w2, 2);
    ghost var p6 := uint256_qmul(w30, 3, w2, 0);
    ghost var p7 := uint256_qmul(w30, 2, w2, 1);
    ghost var p8 := uint256_qmul(w30, 1, w2, 2);
    ghost var p9 := uint256_qmul(w30, 0, w2, 3);
    ghost var p10 := uint256_qmul(w30, 3, w2, 1);
    ghost var p11 := uint256_qmul(w30, 2, w2, 2);
    ghost var p12 := uint256_qmul(w30, 1, w2, 3);
    ghost var p13 := uint256_qmul(w30, 3, w2, 2);
    ghost var p14 := uint256_qmul(w30, 2, w2, 3);
    ghost var p15 := uint256_qmul(w30, 3, w2, 3);

    ghost var w26_0 := w26; // dummy 
    ghost var w27_0 := w27; // dummy

    ghost var r0 := p0 + (p1 + p2) * BASE_64;
    ghost var r1 := uint256_uh(r0) + p3 + p4 + p5 + (p6 + p7 + p8 + p9) * BASE_64;
    ghost var r2 := uint256_uh(r1) + p10 + p11 + p12 + (p13 + p14) * BASE_64;
    ghost var r3 := uint256_uh(r2) + p15;

    bn_mulqacc_z(w30, 0, w2, 0, 0);
    bn_mulqacc_safe(w30, 1, w2, 0, 1);
    bn_mulqacc_so_safe(w27, true, w30, 0, w2, 1, 1);

    ghost var w27_1 := w27;
    assert wacc == uint256_uh(r0);
    assert w27_1 == uint256_hwb(w27_0, uint256_lh(r0), true);

    bn_mulqacc_safe(w30, 2, w2, 0, 0);
    bn_mulqacc_safe(w30, 1, w2, 1, 0);
    bn_mulqacc_safe(w30, 0, w2, 2, 0);

    bn_mulqacc_safe(w30, 3, w2, 0, 1);
    bn_mulqacc_safe(w30, 2, w2, 1, 1);
    bn_mulqacc_safe(w30, 1, w2, 2, 1);
    bn_mulqacc_so_safe(w27, false, w30, 0, w2, 3, 1);

    ghost var w27_2 := w27;
    assert wacc == uint256_uh(r1);
    assert w27_2 == uint256_hwb(w27_1, uint256_lh(r1), false);

    bn_mulqacc_safe(w30, 3, w2, 1, 0);
    bn_mulqacc_safe(w30, 2, w2, 2, 0);
    bn_mulqacc_safe(w30, 1, w2, 3, 0);
    bn_mulqacc_safe(w30, 3, w2, 2, 1);
    bn_mulqacc_so_safe(w26, true, w30, 2, w2, 3, 1);

    ghost var w26_1 := w26;
    assert wacc == uint256_uh(r2);
    assert w26_1 == uint256_hwb(w26_0, uint256_lh(r2), true);

    bn_mulqacc_so_safe(w26, false, w30, 3, w2, 3, 0);

    ghost var w26_2 := w26;
    assert wacc == uint256_uh(r3);
    assert w26_2 == uint256_hwb(w26_1, uint256_lh(r3), false);

    assume false;
}

procedure mul256_w30xw25()
    reads
        w25; w30;
    modifies
        w26; w27;
    ensures
        to_nat(seq(w27, w26)) == w30 * w25;
{
    assume false;
}

#verbatim
}
#endverbatim
