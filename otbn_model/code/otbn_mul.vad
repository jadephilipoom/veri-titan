include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../code/otbn_mul_lemmas.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

module otbn_mul {

import opened bignum_vale
import opened otbn_mul_lemmas

import opened bignum_def
import opened ops
import opened types

import opened bignum_decls

#endverbatim

ghost procedure lemma_bn_half_mul(
    ghost wacc_g1: uint256,
    ghost wacc_g2: uint256,
    ghost wacc_g3: uint256,
    ghost wacc_g4: uint256,
    ghost wacc_g5: uint256,
    ghost wacc_g6: uint256,
    ghost wacc_g7: uint256,
    ghost wacc_g8: uint256,
    ghost wacc_g9: uint256,
    ghost wacc: uint256,
    ghost w1_g1: uint256,
    ghost w1_g2: uint256,
    ghost result_g1: uint256,
    ghost result_g2: uint256,
    ghost w1: uint256,
    ghost w28: uint256,
    ghost w29: uint256
) extern;

function half_product(p: int, x:int, y:int): bool extern;

procedure half_mul(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        @src1 != @dst; @src1 != WAcc;
        @src2 != @dst; @src2 != WAcc;
        @dst != WAcc;
    modifies wacc;
    ensures half_product(dst, src1, src2);
{
    let w1_g1 := dst;

    BN_MULQACC_Z(src1, 0, src2, 0, 0);
    // BN.MULQACC.Z w28.0, w29.0, 0
    let wacc_g1 := wacc;
    assert wacc_g1 == mulqacc256(true, src1, 0, src2, 0, 0, 0);

    BN_MULQACC(src1, 1, src2, 0, 1);
    // BN.MULQACC w28.1, w29.0, 1
    let wacc_g2 := wacc;
    assert wacc_g2 == mulqacc256(false, src1, 1, src2, 0, 1, wacc_g1);

    BN_MULQACC_SO(dst, true, src1, 0, src2, 1, 1);
    // BN.MULQACC.SO w1.L, w28.0, w29.1, 1
    let wacc_g3 := wacc;
    let w1_g2 := dst;
    let result_g1 := mulqacc256(false, src1, 0, src2, 1, 1, wacc_g2);
    assert wacc_g3 == uint256_uh(result_g1)
        && w1_g2 == uint256_hwb(w1_g1, uint256_lh(result_g1), true);

    BN_MULQACC(src1, 2, src2, 0, 0);
    // BN.MULQACC w28.2, w29.0, 0
    let wacc_g4 := wacc;
    assert wacc_g4 == mulqacc256(false, src1, 2, src2, 0, 0, wacc_g3);

    BN_MULQACC(src1, 1, src2, 1, 0);
    // BN.MULQACC w28.1, w29.1, 0
    let wacc_g5 := wacc;
    assert wacc_g5 == mulqacc256(false, src1, 1, src2, 1, 0, wacc_g4);

    BN_MULQACC(src1, 0, src2, 2, 0);
    // BN.MULQACC w28.0, w29.2, 0
    let wacc_g6 := wacc;
    assert wacc_g6 == mulqacc256(false, src1, 0, src2, 2, 0, wacc_g5);

    BN_MULQACC(src1, 3, src2, 0, 1);
    // BN.MULQACC w28.3, w29.0, 1
    let wacc_g7 := wacc;
    assert wacc_g7 == mulqacc256(false, src1, 3, src2, 0, 1, wacc_g6);

    BN_MULQACC(src1, 2, src2, 1, 1);
    // BN.MULQACC w28.2, w29.1, 1
    let wacc_g8 := wacc;
    assert wacc_g8 == mulqacc256(false, src1, 2, src2, 1, 1, wacc_g7);

    BN_MULQACC(src1, 1, src2, 2, 1);
    // BN.MULQACC w28.1, w29.2, 1
    let wacc_g9 := wacc;
    assert wacc_g9 == mulqacc256(false, src1, 1, src2, 2, 1, wacc_g8);

    BN_MULQACC_SO(dst, false, src1, 0, src2, 3, 1);
    // BN.MULQACC.SO w1.U, w28.0, w29.3, 1
    let result_g2 := mulqacc256(false, src1, 0, src2, 3, 1, wacc_g9);
    assert wacc == uint256_uh(result_g2)
        && dst == uint256_hwb(w1_g2, uint256_lh(result_g2), false);

    lemma_bn_half_mul(wacc_g1, wacc_g2, wacc_g3, wacc_g4, wacc_g5, wacc_g6, wacc_g7, wacc_g8, wacc_g9, wacc,
        w1_g1, w1_g2, result_g1, result_g2,
        dst, src1, src2);
}

procedure safe_half_mul(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        @src1 != @dst; @src1 != WAcc;
        @src2 != @dst; @src2 != WAcc;
        @dst != WAcc;
    modifies wacc;
{
    BN_MULQACC_Z(src1, 0, src2, 0, 0);
    BN_MULQACC_SAFE(src1, 1, src2, 0, 1);
    BN_MULQACC_SO_SAFE(dst, true, src1, 0, src2, 1, 1);
    BN_MULQACC_SAFE(src1, 2, src2, 0, 0);
    BN_MULQACC_SAFE(src1, 1, src2, 1, 0);
    BN_MULQACC_SAFE(src1, 0, src2, 2, 0);
    BN_MULQACC_SAFE(src1, 3, src2, 0, 1);
    BN_MULQACC_SAFE(src1, 2, src2, 1, 1);
    BN_MULQACC_SAFE(src1, 1, src2, 2, 1);
    BN_MULQACC_SO_SAFE(dst, false, src1, 0, src2, 3, 1);
}

procedure safe_384_mul()
    reads w8; w9; w10; w11;
    modifies wacc; w16; w17; w18;
{
BN_MULQACC_Z(w8, 0, w10, 0, 0);
let wacc_g0 := wacc;

BN_MULQACC_SAFE(w8, 0, w10, 1, 1);
let wacc_g1 := wacc;

let w16_g0 := w16;
BN_MULQACC_SO_SAFE(w16, true, w8, 1, w10, 0, 1);
let w16_g1 := w16;
let temp_g0 := bn_mulqacc_safe(false, w8, 1, w10, 0, 1, wacc_g1);
let temp_g1 := uint256_lh(temp_g0);
let wacc_g2 := wacc;

BN_MULQACC_SAFE(w8, 0, w10, 2, 0);
let wacc_g3 := wacc;

BN_MULQACC_SAFE(w8, 1, w10, 1, 0);
let wacc_g4 := wacc;

BN_MULQACC_SAFE(w8, 2, w10, 0, 0);
let wacc_g5 := wacc;

BN_MULQACC_SAFE(w8, 0, w10, 3, 1);
let wacc_g6 := wacc;

BN_MULQACC_SAFE(w8, 1, w10, 2, 1);
let wacc_g7 := wacc;

BN_MULQACC_SAFE(w8, 2, w10, 1, 1);
let wacc_g8 := wacc;

BN_MULQACC_SO_SAFE(w16, false, w8, 3, w10, 0, 1);
let w16_g2 := w16;
let temp_g2 := bn_mulqacc_safe(false, w8, 3, w10, 0, 1, wacc_g8);
let temp_g3 := uint256_lh(temp_g2);
let wacc_g9 := wacc;

BN_MULQACC_SAFE(w8, 0, w11, 0, 0);
let wacc_g10 := wacc;

BN_MULQACC_SAFE(w8, 1, w10, 3, 0);
let wacc_g11 := wacc;

BN_MULQACC_SAFE(w8, 2, w10, 2, 0);
let wacc_g12 := wacc;

BN_MULQACC_SAFE(w8, 3, w10, 1, 0);
let wacc_g13 := wacc;

BN_MULQACC_SAFE(w9, 0, w10, 0, 0);
let wacc_g14 := wacc;

BN_MULQACC_SAFE(w8, 0, w11, 1, 1);
let wacc_g15 := wacc;

BN_MULQACC_SAFE(w8, 1, w11, 0, 1);
let wacc_g16 := wacc;

BN_MULQACC_SAFE(w8, 2, w10, 3, 1);
let wacc_g17 := wacc;

BN_MULQACC_SAFE(w8, 3, w10, 2, 1);
let wacc_g18 := wacc;

BN_MULQACC_SAFE(w9, 0, w10, 1, 1);
let wacc_g19 := wacc;

let w17_g0 := w17;
BN_MULQACC_SO_SAFE(w17, true, w9, 1, w10, 0, 1);
let w17_g1 := w17;
let temp_g4 := bn_mulqacc_safe(false, w9, 1, w10, 0, 1, wacc_g19);
let temp_g5 := uint256_lh(temp_g4);
let wacc_g20 := wacc;

BN_MULQACC_SAFE(w8, 1, w11, 1, 0);
let wacc_g21 := wacc;

BN_MULQACC_SAFE(w8, 2, w11, 0, 0);
let wacc_g22 := wacc;

BN_MULQACC_SAFE(w8, 3, w10, 3, 0);
let wacc_g23 := wacc;

BN_MULQACC_SAFE(w9, 0, w10, 2, 0);
let wacc_g24 := wacc;

BN_MULQACC_SAFE(w9, 1, w10, 1, 0);
let wacc_g25 := wacc;

BN_MULQACC_SAFE(w8, 2, w11, 1, 1);
let wacc_g26 := wacc;

BN_MULQACC_SAFE(w8, 3, w11, 0, 1);
let wacc_g27 := wacc;

BN_MULQACC_SAFE(w9, 0, w10, 3, 1);
let wacc_g28 := wacc;

BN_MULQACC_SO_SAFE(w17, false, w9, 1, w10, 2, 1);
let w17_g2 := w17;
let temp_g6 := bn_mulqacc_safe(false, w9, 1, w10, 2, 1, wacc_g28);
let temp_g7 := uint256_lh(temp_g6);
let wacc_g29 := wacc;

BN_MULQACC_SAFE(w8, 3, w11, 1, 0);
let wacc_g30 := wacc;

BN_MULQACC_SAFE(w9, 0, w11, 0, 0);
let wacc_g31 := wacc;

BN_MULQACC_SAFE(w9, 1, w10, 3, 0);
let wacc_g32 := wacc;

BN_MULQACC_SAFE(w9, 0, w11, 1, 1);
let wacc_g33 := wacc;

let w18_g0 := w18;
BN_MULQACC_SO_SAFE(w18, true, w9, 1, w11, 0, 1);
let w18_g1 := w18;
let temp_g8 := bn_mulqacc_safe(false, w9, 1, w11, 0, 1, wacc_g33);
let temp_g9 := uint256_lh(temp_g8);
let wacc_g34 := wacc;

BN_MULQACC_SO_SAFE(w18, false, w9, 1, w11, 1, 0);
let w18_g2 := w18;
let temp_g10 := bn_mulqacc_safe(false, w9, 1, w11, 1, 0, wacc_g34);
let temp_g11 := uint256_lh(temp_g10);
let wacc_g35 := wacc;

assert wacc_g0 == bn_mulqacc_safe(true, w8, 0, w10, 0, 0, 0);
assert wacc_g1 == bn_mulqacc_safe(false, w8, 0, w10, 1, 1, wacc_g0);
assert temp_g0 == bn_mulqacc_safe(false, w8, 1, w10, 0, 1, wacc_g1);
assert wacc_g2 == uint256_uh(temp_g0);
assert temp_g1 == uint256_lh(temp_g0);
assert w16_g1 == uint256_hwb(w16_g0, temp_g1, true);
assert wacc_g3 == bn_mulqacc_safe(false, w8, 0, w10, 2, 0, wacc_g2);
assert wacc_g4 == bn_mulqacc_safe(false, w8, 1, w10, 1, 0, wacc_g3);
assert wacc_g5 == bn_mulqacc_safe(false, w8, 2, w10, 0, 0, wacc_g4);
assert wacc_g6 == bn_mulqacc_safe(false, w8, 0, w10, 3, 1, wacc_g5);
assert wacc_g7 == bn_mulqacc_safe(false, w8, 1, w10, 2, 1, wacc_g6);
assert wacc_g8 == bn_mulqacc_safe(false, w8, 2, w10, 1, 1, wacc_g7);
assert temp_g2 == bn_mulqacc_safe(false, w8, 3, w10, 0, 1, wacc_g8);
assert wacc_g9 == uint256_uh(temp_g2);
assert temp_g3 == uint256_lh(temp_g2);
assert w16_g2 == uint256_hwb(w16_g1, temp_g3, false);
assert wacc_g10 == bn_mulqacc_safe(false, w8, 0, w11, 0, 0, wacc_g9);
assert wacc_g11 == bn_mulqacc_safe(false, w8, 1, w10, 3, 0, wacc_g10);
assert wacc_g12 == bn_mulqacc_safe(false, w8, 2, w10, 2, 0, wacc_g11);
assert wacc_g13 == bn_mulqacc_safe(false, w8, 3, w10, 1, 0, wacc_g12);
assert wacc_g14 == bn_mulqacc_safe(false, w9, 0, w10, 0, 0, wacc_g13);
assert wacc_g15 == bn_mulqacc_safe(false, w8, 0, w11, 1, 1, wacc_g14);
assert wacc_g16 == bn_mulqacc_safe(false, w8, 1, w11, 0, 1, wacc_g15);
assert wacc_g17 == bn_mulqacc_safe(false, w8, 2, w10, 3, 1, wacc_g16);
assert wacc_g18 == bn_mulqacc_safe(false, w8, 3, w10, 2, 1, wacc_g17);
assert wacc_g19 == bn_mulqacc_safe(false, w9, 0, w10, 1, 1, wacc_g18);
assert temp_g4 == bn_mulqacc_safe(false, w9, 1, w10, 0, 1, wacc_g19);
assert wacc_g20 == uint256_uh(temp_g4);
assert temp_g5 == uint256_lh(temp_g4);
assert w17_g1 == uint256_hwb(w17_g0, temp_g5, true);
assert wacc_g21 == bn_mulqacc_safe(false, w8, 1, w11, 1, 0, wacc_g20);
assert wacc_g22 == bn_mulqacc_safe(false, w8, 2, w11, 0, 0, wacc_g21);
assert wacc_g23 == bn_mulqacc_safe(false, w8, 3, w10, 3, 0, wacc_g22);
assert wacc_g24 == bn_mulqacc_safe(false, w9, 0, w10, 2, 0, wacc_g23);
assert wacc_g25 == bn_mulqacc_safe(false, w9, 1, w10, 1, 0, wacc_g24);
assert wacc_g26 == bn_mulqacc_safe(false, w8, 2, w11, 1, 1, wacc_g25);
assert wacc_g27 == bn_mulqacc_safe(false, w8, 3, w11, 0, 1, wacc_g26);
assert wacc_g28 == bn_mulqacc_safe(false, w9, 0, w10, 3, 1, wacc_g27);
assert temp_g6 == bn_mulqacc_safe(false, w9, 1, w10, 2, 1, wacc_g28);
assert wacc_g29 == uint256_uh(temp_g6);
assert temp_g7 == uint256_lh(temp_g6);
assert w17_g2 == uint256_hwb(w17_g1, temp_g7, false);
assert wacc_g30 == bn_mulqacc_safe(false, w8, 3, w11, 1, 0, wacc_g29);
assert wacc_g31 == bn_mulqacc_safe(false, w9, 0, w11, 0, 0, wacc_g30);
assert wacc_g32 == bn_mulqacc_safe(false, w9, 1, w10, 3, 0, wacc_g31);
assert wacc_g33 == bn_mulqacc_safe(false, w9, 0, w11, 1, 1, wacc_g32);
assert temp_g8 == bn_mulqacc_safe(false, w9, 1, w11, 0, 1, wacc_g33);
assert wacc_g34 == uint256_uh(temp_g8);
assert temp_g9 == uint256_lh(temp_g8);
assert w18_g1 == uint256_hwb(w18_g0, temp_g9, true);
assert temp_g10 == bn_mulqacc_safe(false, w9, 1, w11, 1, 0, wacc_g34);
assert wacc_g35 == uint256_uh(temp_g10);
assert temp_g11 == uint256_lh(temp_g10);
assert w18_g2 == uint256_hwb(w18_g1, temp_g11, false);



}

#verbatim
}
#endverbatim
