include{:verbatim} "../code/vale.dfy"
include{:verbatim} "../spec/def.dfy"
include{:verbatim} "../spec/ops.dfy"

#verbatim
module bignum_decls {

import opened ops
import opened bignum_vale
import opened bignum_def
#endverbatim

// type nat:Type(0) := int_range(0, _);
type state:Type(0) {:primitive} extern;

type uint2:Type(0) := int_range(0, 3);
type uint32:Type(0) := int_range(0, 0xffff_ffff);
type uint128:Type(0) := int_range(0, 0xffffffffffffffffffffffffffffffff);
type uint256:Type(0) := int_range(0, 0xffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff);

type seq(a:Type(0)):Type(0) {:primitive} extern;
type map(a:Type(0), b:Type(0)):Type(0) extern;
type Bignum:Type(0) := uint256;
type Frame:Type(0) := map(int, uint32);
type Stack:Type(0) := seq(Frame);
type FlagsGroup:Type(0) extern;
type Flags:Type(0) extern;
type Reg256:Type(0) extern;

function operator(.ok) (s:state):bool extern;
function operator(.ok :=) (s:state, b:bool):state extern;

function operator([]) #[a:Type(0)](s:seq(a), i:int):a extern; // TODO: requires clause
function operator([ := ]) #[a:Type(0)](s:seq(a), i:int, v:a):seq(a) extern; // TODO: requires clause
function operator([]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a):b extern; // TODO: requires clause
function operator([ := ]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a, v:b):map(a, b) extern;

function xor32(x:uint32, y:uint32):uint32 extern;
function or32(x:uint32, y:uint32):uint32 extern;
function and32(x:uint32, y:uint32):uint32 extern;
function not32(x:uint32):uint32 extern;
function shl32(x:uint32, amount:uint32):uint32 extern; // TODO: requires clause
function shr32(x:uint32, amount:uint32):uint32 extern; // TODO: requires clause
function sext32(x:uint32, size:int):uint32 extern;

function xor256(a:Bignum, b:Bignum, st:bool, sb:uint32):Bignum extern;
function or256(a:Bignum, b:Bignum, st:bool, sb:uint32):Bignum extern;
function and256(a:Bignum, b:Bignum, st:bool, sb:uint32):Bignum extern;
function add256(a:Bignum, b:Bignum, st:bool, sb:uint32):tuple(Bignum, FlagsGroup) extern;
function addc256(a:Bignum, b:Bignum, st:bool, sb:uint32, flags_group:FlagsGroup):tuple(Bignum, FlagsGroup) extern;
function addi256(a:Bignum, imm:uint32):tuple(Bignum, FlagsGroup) extern;
function addm256(a:Bignum, b:Bignum, mod:Bignum):Bignum extern;

function sub256(a:Bignum, b:Bignum, st:bool, sb:uint32):tuple(Bignum, FlagsGroup) extern;
function subb256(a:Bignum, b:Bignum, st:bool, sb:uint32, flags_group:FlagsGroup):tuple(Bignum, FlagsGroup) extern;
function subi256(a:Bignum, b:Bignum):tuple(Bignum, FlagsGroup) extern;
function subm256(a:Bignum, b:Bignum, mod:Bignum):Bignum extern;

function rshi256(src1:Bignum, src2:Bignum, imm:uint32):Bignum extern;

function bn_mulqacc_is_safe(shift:uint32, macc: Bignum):bool extern;
function bn_mulqacc_safe(zero: bool, a:Bignum, qa:uint32, b:Bignum, qb:uint32, shift:uint32, macc:Bignum):Bignum extern;

function mulqacc256(zero: bool, a:Bignum, qa:uint32, b:Bignum, qb:uint32, shift:uint32, macc:Bignum):Bignum extern;
function uint256_hwb(x: Bignum, v: uint128, lower: bool):Bignum extern;
function uint256_qmul(x: uint256, qx: uint2, y: uint256, qy:uint2): uint128 extern;

function uint256_ls(x: uint256, num_bytes:int): uint256 extern;
function uint256_rs(x:uint256, num_bytes:int): uint256 extern;

function uint256_lh(a: Bignum): uint128 extern;
function uint256_uh(a: Bignum): uint128 extern;

function get_flags_group(fg:bool, flags:Flags):FlagsGroup extern;
function get_flag(fg:bool, flag:int, flags:Flags):bool extern;
function update_fg(b:bool, f:Flags, fg:FlagsGroup):Flags extern;
function cf(flags_group:FlagsGroup):bool extern;

function fst(t:tuple(Bignum, FlagsGroup)):Bignum extern;
function snd(t:tuple(Bignum, FlagsGroup)):FlagsGroup extern;

var ok:bool {:state ok()};
var stack:Stack {:state stack()};
var flags:Flags {:state flags() };

var x0:uint32 {:state reg32(Gpr(0))};
var x1:uint32 {:state reg32(Gpr(1))};
var x2:uint32 {:state reg32(Gpr(2))};
var x3:uint32 {:state reg32(Gpr(3))};
var x4:uint32 {:state reg32(Gpr(4))};
var x5:uint32 {:state reg32(Gpr(5))};
var x6:uint32 {:state reg32(Gpr(6))};
var x7:uint32 {:state reg32(Gpr(7))};
var x8:uint32 {:state reg32(Gpr(8))};
var x9:uint32 {:state reg32(Gpr(9))};
var x10:uint32 {:state reg32(Gpr(10))};
var x11:uint32 {:state reg32(Gpr(11))};
var x12:uint32 {:state reg32(Gpr(12))};
var x13:uint32 {:state reg32(Gpr(13))};
var x14:uint32 {:state reg32(Gpr(14))};
var x15:uint32 {:state reg32(Gpr(15))};
var x16:uint32 {:state reg32(Gpr(16))};
var x17:uint32 {:state reg32(Gpr(17))};
var x18:uint32 {:state reg32(Gpr(18))};
var x19:uint32 {:state reg32(Gpr(19))};
var x20:uint32 {:state reg32(Gpr(20))};
var x21:uint32 {:state reg32(Gpr(21))};
var x22:uint32 {:state reg32(Gpr(22))};
var x23:uint32 {:state reg32(Gpr(23))};
var x24:uint32 {:state reg32(Gpr(24))};
var x25:uint32 {:state reg32(Gpr(25))};
var x26:uint32 {:state reg32(Gpr(26))};
var x27:uint32 {:state reg32(Gpr(27))};
var x28:uint32 {:state reg32(Gpr(28))};
var x29:uint32 {:state reg32(Gpr(29))};
var x30:uint32 {:state reg32(Gpr(30))};
var x31:uint32 {:state reg32(Gpr(31))};

var rnd:uint32 {:state reg32(Rnd)};

var w0:Bignum {:state reg256(Wdr(0))};
var w1:Bignum {:state reg256(Wdr(1))};
var w2:Bignum {:state reg256(Wdr(2))};
var w3:Bignum {:state reg256(Wdr(3))};
var w4:Bignum {:state reg256(Wdr(4))};
var w5:Bignum {:state reg256(Wdr(5))};
var w6:Bignum {:state reg256(Wdr(6))};
var w7:Bignum {:state reg256(Wdr(7))};
var w8:Bignum {:state reg256(Wdr(8))};
var w9:Bignum {:state reg256(Wdr(9))};
var w10:Bignum {:state reg256(Wdr(10))};
var w11:Bignum {:state reg256(Wdr(11))};
var w12:Bignum {:state reg256(Wdr(12))};
var w13:Bignum {:state reg256(Wdr(13))};
var w14:Bignum {:state reg256(Wdr(14))};
var w15:Bignum {:state reg256(Wdr(15))};
var w16:Bignum {:state reg256(Wdr(16))};
var w17:Bignum {:state reg256(Wdr(17))};
var w18:Bignum {:state reg256(Wdr(18))};
var w19:Bignum {:state reg256(Wdr(19))};
var w20:Bignum {:state reg256(Wdr(20))};
var w21:Bignum {:state reg256(Wdr(21))};
var w22:Bignum {:state reg256(Wdr(22))};
var w23:Bignum {:state reg256(Wdr(23))};
var w24:Bignum {:state reg256(Wdr(24))};
var w25:Bignum {:state reg256(Wdr(25))};
var w26:Bignum {:state reg256(Wdr(26))};
var w27:Bignum {:state reg256(Wdr(27))};
var w28:Bignum {:state reg256(Wdr(28))};
var w29:Bignum {:state reg256(Wdr(29))};
var w30:Bignum {:state reg256(Wdr(30))};
var w31:Bignum {:state reg256(Wdr(31))};

var wmod:Bignum {:state reg256(WMod)};
var wrnd:Bignum {:state reg256(WRnd)};
var wacc:Bignum {:state reg256(WAcc)};

const WAcc: Reg256 extern;

operand_type reg32:uint32 :=
| inout x0 | inout x1 | inout x2 | inout x3
| inout x4 | inout x5 | inout x6 | inout x7
| inout x8 | inout x9 | inout x10 | inout x11
| inout x12 | inout x13 | inout x14 | inout x15
| inout x16 | inout x17 | inout x18 | inout x19
| inout x20 | inout x21 | inout x22 | inout x23
| inout x24 | inout x25 | inout x26 | inout x27
| inout x28 | inout x29 | inout x30 | inout x31
| inout xrnd;

operand_type reg256:Bignum @ Reg256 := 
| inout w0 | inout w1 | inout w2 | inout w3
| inout w4 | inout w5 | inout w6 | inout w7
| inout w8 | inout w9 | inout w10 | inout w11
| inout w12 | inout w13 | inout w14 | inout w15
| inout w16 | inout w17 | inout w18 | inout w19
| inout w20 | inout w21 | inout w22 | inout w23
| inout w24 | inout w25 | inout w26 | inout w27
| inout w28 | inout w29 | inout w30 | inout w31
| inout wmod | inout wrnd | inout wacc;

operand_type imm128:uint128 := const;
operand_type imm32:uint32 := const;
operand_type imm2:uint2 := const;

procedure Add32(inout dst:reg32, in src1:reg32, in src2:reg32)
    {:instruction Ins32(ADD32(dst, src1, src2))}
    ensures
        // TODO: How does Dafny addition handle overflows?
        dst == (old(src1) + old(src2));
{
assume false;
}

procedure Addi32(inout dst:reg32, in src1:reg32, in src2:imm32)
    {:instruction Ins32(ADDI32(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        //dst = old(src1) + sext32(old(src2), 12);
        dst = old(src1) + old(src2);
{
assume false;
}

procedure Sub32(inout dst:reg32, in src1:reg32, in src2:reg32)
    {:instruction Ins32(SUB32(dst, src1, src2))}
    ensures
        dst == old(src1) - old(src2);
{
assume false;
}

procedure And32(inout dst:reg32, in src1:reg32, in src2:reg32)
    {:instruction Ins32(AND32(dst, src1, src2))}
    ensures
        dst == and32(old(src1), old(src2));
{
assume false;
}

procedure Andi32(inout dst:reg32, in src1:reg32, in src2:imm32)
    {:instruction Ins32(ANDI32(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        dst == and32(old(src1), sext32(old(src2), 12));
{
assume false;
}

procedure Or32(inout dst:reg32, in src1:reg32, in src2:reg32)
    {:instruction Ins32(OR32(dst, src1, src2))}
    ensures
        dst == or32(old(src1), old(src2));
{
assume false;
}

procedure Ori32(inout dst:reg32, in src1:reg32, in src2:imm32)
    {:instruction Ins32(ORI32(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        dst == or32(old(src1), sext32(old(src2), 12));
{
assume false;
}

procedure Xor32(inout dst:reg32, in src1:reg32, in src2:reg32)
    {:instruction Ins32(XOR32(dst, src1, src2))}
    ensures
        dst == xor32(old(src1), old(src2));
{
assume false;
}

procedure Xori32(inout dst:reg32, in src1:reg32, in src2:imm32)
    {:instruction Ins32(XORI32(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        dst == xor32(old(src1), sext32(old(src2), 12));
{
assume false;
}

procedure Lui32(inout dst:reg32, in src:imm32)
    {:instruction Ins32(LUI32(dst, src))}
    requires
        src < 0x100000; // 20-bit immediate
    ensures
        dst == shl32(old(src), 12);
{
assume false;
}

// TODO: Handle case where dst is x0
procedure Csrrw32(inout dst:reg32, inout csr:reg32, in src:reg32)
    {:instruction Ins32(CSRRW32(dst, csr, src))}
    requires
        csr == rnd; // TODO: check if this is correct
    ensures
        dst == old(csr);
        csr == old(src);
{
assume false;
}

// Bignum Instructions

procedure BN_XOR(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32)
    {:instruction Ins256(XOR256(dst, src1, src2, st, sb))}
    requires
        sb < 32;
    ensures
        dst == xor256(old(src1), old(src2), st, sb);
{
assume false;
}

procedure BN_ADD(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32, inline fg:bool)
    {:instruction Ins256(ADD256(dst, src1, src2, st, sb, fg))}
    requires
        sb < 32;
    modifies
        flags;
    ensures
        let result := add256(old(src1), old(src2), st, sb);
        dst == fst(result) && flags == update_fg(fg, old(flags), snd(result));
{
assume false;
}

procedure BN_ADDC(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32, inline fg:bool)
    {:instruction Ins256(ADDC256(dst, src1, src2, st, sb, fg))}
    requires
        sb < 32;
    modifies
        flags;
    ensures
        let result := addc256(old(src1), old(src2), st, sb, get_flags_group(fg, old(flags)));
        dst == fst(result) && flags == update_fg(fg, old(flags), snd(result));
{
assume false;
}

procedure BN_ADDI(inout dst:reg256, in src:reg256, in imm:imm32, inline fg:bool)
    {:instruction Ins256(ADDI256(dst, src, imm, fg))}
    requires
        imm < 1024;
    modifies
        flags;
    ensures
        let result := addi256(old(src), imm);
        dst == fst(result) && flags == update_fg(fg, old(flags), snd(result));
{
    assume false;
}

procedure ADDM_256(inout dst:reg256, in src1:reg256, in src2:reg256)
    {:instruction Ins256(ADDM256(dst, src1, src2))}
    reads
        wmod;
    ensures
        dst == addm256(old(src1), old(src2), old(wmod));
{
    assume false;
}

procedure BN_SUB(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32, inline fg:bool)
    {:instruction Ins256(SUB256(dst, src1, src2, st, sb, fg))}
    requires
        sb < 32;
    modifies
        flags;
    ensures
        let result := sub256(old(src1), old(src2), st, sb);
        dst == fst(result) && flags == update_fg(fg, old(flags), snd(result));
{
assume false;
}

procedure BN_SUBB(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32, inline fg:bool)
    {:instruction Ins256(SUBB256(dst, src1, src2, st, sb, fg))}
    requires
        sb < 32;
    modifies
        flags;
    ensures
        let result := subb256(old(src1), old(src2), st, sb, get_flags_group(fg, old(flags)));
        dst == fst(result) && flags == update_fg(fg, old(flags), snd(result));
{
assume false;
}

procedure BN_SUBI(inout dst:reg256, in src1:reg256, in src2:imm128, inline fg:bool)
    {:instruction Ins256(SUBI256(dst, src1, src2, fg))}
    requires
        src2 < 1024;
    modifies
        flags;
    ensures
        let result := subi256(old(src1), src2);
        dst == fst(result) && flags == update_fg(fg, old(flags), snd(result));
{
assume false;
}

procedure BN_SUBM(inout dst:reg256, in src1:reg256, in src2:reg256)
    {:instruction Ins256(SUBM256(dst, src1, src2))}
    reads
        wmod;
    ensures
        dst == subm256(old(src1), old(src2), wmod);
{
assume false;
}

procedure BN_OR(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32)
    {:instruction Ins256(OR256(dst, src1, src2, st, sb))}
    requires
        sb < 32;
    modifies
        flags;
    ensures
        dst == or256(old(src1), old(src2), st, sb);
{
assume false;
}

procedure BN_AND(inout dst:reg256, in src1:reg256, in src2:reg256, inline st:bool, in sb:imm32)
    {:instruction Ins256(AND256(dst, src1, src2, st, sb))}
    requires
        sb < 32;
    modifies
        flags;
    ensures
        dst == and256(old(src1), old(src2), st, sb);
{
assume false;
}

procedure BN_MULQACC_Z(in src1:reg256, in qwsel1:imm2, in src2:reg256, in qwsel2:imm2, in shift:imm2)
    {:instruction Ins256(MULQACC256(true, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        wacc == mulqacc256(true, src1, qwsel1, src2, qwsel2, shift, old(wacc));
{
    assume false;
}

procedure BN_MULQACC(in src1:reg256, in qwsel1:imm2, in src2:reg256, in qwsel2:imm2, in shift:imm2)
    {:instruction Ins256(MULQACC256(false, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        wacc == mulqacc256(false, src1, qwsel1, src2, qwsel2, shift, old(wacc));
{
    assume false;
}

procedure BN_MULQACC_SAFE(in src1:reg256, in qwsel1:imm2, in src2:reg256, in qwsel2:imm2, in shift:imm2)
    {:instruction Ins256(MULQACC256(false, src1, qwsel1, src2, qwsel2, shift))}
    requires
        bn_mulqacc_is_safe(shift, old(wacc));
    modifies
        wacc;
    ensures
        wacc == bn_mulqacc_safe(false, src1, qwsel1, src2, qwsel2, shift, old(wacc));
{
    assume false;
}

procedure BN_MULQACC_SO( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256,
    in qwsel1:imm2,
    in src2:reg256,
    in qwsel2:imm2,
    in shift:imm2)
    {:instruction Ins256(MULQACCSO256(false, dst, lower, src1, qwsel1, src2, qwsel2, shift))}

    modifies
        wacc;
    ensures
        let result := mulqacc256(false, src1, qwsel1, src2, qwsel2, shift, old(wacc));
        // the upper half stay in wacc
        wacc == uint256_uh(result)
        // the lower half gets written back into dst
        && dst == uint256_hwb(old(dst), uint256_lh(result), lower);
{
    assume false;
}

procedure BN_MULQACC_SO_SAFE( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256,
    in qwsel1:imm2,
    in src2:reg256,
    in qwsel2:imm2,
    in shift:imm2)
    {:instruction Ins256(MULQACC256(false, src1, qwsel1, src2, qwsel2, shift))}

    requires
        bn_mulqacc_is_safe(shift, old(wacc));
    modifies
        wacc;
    ensures
        let result := bn_mulqacc_safe(false, src1, qwsel1, src2, qwsel2, shift, old(wacc));
        // the upper half stay in wacc
        wacc == uint256_uh(result)
        // the lower half gets written back into dst
        && dst == uint256_hwb(old(dst), uint256_lh(result), lower);
{
    assume false;
}

procedure BN_MOV(inout dst:reg256, in src:reg256)
    {:instruction Ins256(MOV256(dst, src))}
    ensures
        dst == old(src);
{
    assume false;
}

procedure BN_RSHI(inout dst:reg256, in src1:reg256, in src2:reg256, in imm:imm32)
    {:instruction Ins256(RSHI256(dst, src1, src2, imm))}
    requires
        imm < 256;
    ensures
        dst == rshi256(src1, src2, imm);
{
    assume false;
}

procedure BN_SEL(inout dst:reg256, in src1:reg256, in src2:reg256, inline fg:bool, in flag:imm2)
    {:instruction Ins256(SEL256(dst, src1, src2, fg, flag))}
    modifies
        flags;
    ensures
        dst == (if get_flag(fg, flag, old(flags)) then src2 else src1);
{
    assume false;
}
    
#verbatim
} // end module bignum_decls
#endverbatim
