include{: verbatim} "../code/vale.dfy"
include{: verbatim} "../spec/vt_ops.dfy"

#verbatim
module vt_decls {

import opened bv_ops
import opened vt_ops
import opened vt_types
import opened vt_consts
import opened vt_vale

#endverbatim

type seq(a: Type(0)): Type(0) {: primitive} extern;
function operator([]) #[a: Type(0)](s: seq(a), i: int): a extern; 
function operator([ := ]) #[a: Type(0)](s: seq(a), i: int, v: a): seq(a) extern;
function operator([ .. ]) #[a: Type(0)](s: seq(a), begin: int, end: int): seq(a) extern;
function seq_len #[a: Type(0)] (s: seq(a)): nat extern;
function seq_concat #[a: Type(0)](x: seq(a), y: seq(a)): seq(a) extern;
function seq_append #[a: Type(0)](xs: seq(a), x: a): seq(a) extern;

type map(a: Type(0), b: Type(0)): Type(0) extern;
function operator(?[]) #[a:Type(0), b:Type(0)](m:map(a, b), key:a):bool extern;
function operator([]) #[a: Type(0), b: Type(0)](m: map(a, b), key: a): b extern;
function operator([ := ]) #[a: Type(0), b: Type(0)](m: map(a, b), key: a, v: b): map(a, b) extern;

type nat:     Type(0) := int_range(0, _);
type uint1:   Type(0) := int_range(0, 1);
type uint2:   Type(0) := int_range(0, 3);
type uint5:   Type(0) := int_range(0, 31);
type uint32:  Type(0) := int_range(0, 0xffffffff);
type uint128: Type(0) := int_range(0, 0xffffffff_ffffffff_ffffffff_ffffffff);
type uint256: Type(0) := int_range(0, 0xffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff_ffffffff);

const BASE_32:  int extern;
const BASE_64:  int extern; 
const BASE_128: int extern; 
const BASE_256: int extern; 

type state: Type(0) {: primitive} extern;
function operator(.ok) (s: state): bool extern;
function operator(.ok :=) (s: state, b: bool): state extern;

type reg32_t: Type(0) extern;
type reg256_t: Type(0) extern;

type xmem_t: Type(0) := map(int, uint32);
type wmem_t: Type(0) := map(int, seq(uint256));

type wdrs_t: Type(0) extern;
function operator([]) (s: wdrs_t, i: int): uint256 extern; 
function operator([ := ]) (s: wdrs_t, i: int, v: uint256): wdrs_t extern;
function operator([ .. ]) (s: wdrs_t, begin: int, end: int): seq(uint256) extern;

function Loop(u: uint32) : bool extern;
function LoopImm(u: uint32) : bool extern;

function fst #[a: Type(0), b: Type(0)](m: tuple(a, b)): a extern;
function snd #[a: Type(0), b: Type(0)](m: tuple(a, b)): b extern;

function bool_to_uint1(i:bool) : uint1 extern;

var wdrs: wdrs_t {:state wdrs()};

type flags_t: Type(0) extern;
function operator(.cf) (fg: flags_t): bool extern;
function operator(.cf := ) (fg: flags_t, f: bool): flags_t extern;
function operator(.msb) (fg :flags_t): bool extern;
function operator(.msb := ) (fg: flags_t, f: bool): flags_t extern;
function operator(.lsb) (fg :flags_t): bool extern;
function operator(.lsb := ) (fg: flags_t, f: bool): flags_t extern;
function operator(.zero) (fg: flags_t): bool extern;
function operator(.zero := ) (fg: flags_t, f: bool): flags_t extern;

type fgroups_t: Type(0) extern;
function operator(.fg0) (fgroups: fgroups_t): flags_t extern;
function operator(.fg1) (fgroups :fgroups_t): flags_t extern;

var fgroups: fgroups_t  {:state fgroups()};

function select_fgroup(fgps: fgroups_t, which_group: uint1): flags_t extern;
function update_fgroups(fgps: fgroups_t, which_group: uint1, new_flags_t: flags_t) : fgroups_t extern;
function get_flag(fgps: fgroups_t, which_group: uint1, which_flag: int): bool extern;

var ok: bool {:state ok()};

var xmem: xmem_t {:state xmem()};
function valid_xmem_addr(h: xmem_t, addr: int): bool extern;
function valid_buff_addr(wmem: wmem_t, base_addr: int, num_words: int): bool extern;

type iter_t: Type(0) extern;
function iter_cons(base_addr: int, index: nat, buff: seq(uint256)): iter_t extern;
function operator(.base_addr) (iter :iter_t): int extern;
function operator(.index) (iter :iter_t): int extern;
function operator(.index := ) (iter: iter_t, i :int): iter_t extern;
function operator(.buff) (iter :iter_t): seq(uint256) extern;
function operator(.buff := ) (iter :iter_t, buff: seq(uint256)): iter_t extern;

var wmem: wmem_t {:state wmem()};
function valid_iter(wmem: wmem_t, iter: iter_t): bool extern;
function admissible_wmem_addr(h: wmem_t, addr: int, iter: iter_t): bool extern;
function valid_wmem_addr(h: wmem_t, addr: int, iter: iter_t): bool extern;

function to_nat(s: seq(uint256)): nat extern;

var x0: uint32 {:state reg32_t(GPR(0))};
var x1: uint32 {:state reg32_t(GPR(1))};
var x2: uint32 {:state reg32_t(GPR(2))};
var x3: uint32 {:state reg32_t(GPR(3))};
var x4: uint32 {:state reg32_t(GPR(4))};
var x5: uint32 {:state reg32_t(GPR(5))};
var x6: uint32 {:state reg32_t(GPR(6))};
var x7: uint32 {:state reg32_t(GPR(7))};
var x8: uint32 {:state reg32_t(GPR(8))};
var x9: uint32 {:state reg32_t(GPR(9))};
var x10: uint32 {:state reg32_t(GPR(10))};
var x11: uint32 {:state reg32_t(GPR(11))};
var x12: uint32 {:state reg32_t(GPR(12))};
var x13: uint32 {:state reg32_t(GPR(13))};
var x14: uint32 {:state reg32_t(GPR(14))};
var x15: uint32 {:state reg32_t(GPR(15))};
var x16: uint32 {:state reg32_t(GPR(16))};
var x17: uint32 {:state reg32_t(GPR(17))};
var x18: uint32 {:state reg32_t(GPR(18))};
var x19: uint32 {:state reg32_t(GPR(19))};
var x20: uint32 {:state reg32_t(GPR(20))};
var x21: uint32 {:state reg32_t(GPR(21))};
var x22: uint32 {:state reg32_t(GPR(22))};
var x23: uint32 {:state reg32_t(GPR(23))};
var x24: uint32 {:state reg32_t(GPR(24))};
var x25: uint32 {:state reg32_t(GPR(25))};
var x26: uint32 {:state reg32_t(GPR(26))};
var x27: uint32 {:state reg32_t(GPR(27))};
var x28: uint32 {:state reg32_t(GPR(28))};
var x29: uint32 {:state reg32_t(GPR(29))};
var x30: uint32 {:state reg32_t(GPR(30))};
var x31: uint32 {:state reg32_t(GPR(31))};

var w0: uint256 {:state reg256_t(WDR(0))};
var w1: uint256 {:state reg256_t(WDR(1))};
var w2: uint256 {:state reg256_t(WDR(2))};
var w3: uint256 {:state reg256_t(WDR(3))};
var w4: uint256 {:state reg256_t(WDR(4))};
var w5: uint256 {:state reg256_t(WDR(5))};
var w6: uint256 {:state reg256_t(WDR(6))};
var w7: uint256 {:state reg256_t(WDR(7))};
var w8: uint256 {:state reg256_t(WDR(8))};
var w9: uint256 {:state reg256_t(WDR(9))};
var w10: uint256 {:state reg256_t(WDR(10))};
var w11: uint256 {:state reg256_t(WDR(11))};
var w12: uint256 {:state reg256_t(WDR(12))};
var w13: uint256 {:state reg256_t(WDR(13))};
var w14: uint256 {:state reg256_t(WDR(14))};
var w15: uint256 {:state reg256_t(WDR(15))};
var w16: uint256 {:state reg256_t(WDR(16))};
var w17: uint256 {:state reg256_t(WDR(17))};
var w18: uint256 {:state reg256_t(WDR(18))};
var w19: uint256 {:state reg256_t(WDR(19))};
var w20: uint256 {:state reg256_t(WDR(20))};
var w21: uint256 {:state reg256_t(WDR(21))};
var w22: uint256 {:state reg256_t(WDR(22))};
var w23: uint256 {:state reg256_t(WDR(23))};
var w24: uint256 {:state reg256_t(WDR(24))};
var w25: uint256 {:state reg256_t(WDR(25))};
var w26: uint256 {:state reg256_t(WDR(26))};
var w27: uint256 {:state reg256_t(WDR(27))};
var w28: uint256 {:state reg256_t(WDR(28))};
var w29: uint256 {:state reg256_t(WDR(29))};
var w30: uint256 {:state reg256_t(WDR(30))};
var w31: uint256 {:state reg256_t(WDR(31))};

var wmod: uint256 {:state reg256_t(WMOD)};
var wrnd: uint256 {:state reg256_t(WRND)};
var wacc: uint256 {:state reg256_t(WACC)};

operand_type reg32: uint32 @ reg32_t :=
| inout x0 | inout x1 | inout x2 | inout x3
| inout x4 | inout x5 | inout x6 | inout x7
| inout x8 | inout x9 | inout x10 | inout x11
| inout x12 | inout x13 | inout x14 | inout x15
| inout x16 | inout x17 | inout x18 | inout x19
| inout x20 | inout x21 | inout x22 | inout x23
| inout x24 | inout x25 | inout x26 | inout x27
| inout x28 | inout x29 | inout x30 | inout x31
| inout xrnd;

operand_type reg256: uint256 @ reg256_t := 
| inout w0 | inout w1 | inout w2 | inout w3
| inout w4 | inout w5 | inout w6 | inout w7
| inout w8 | inout w9 | inout w10 | inout w11
| inout w12 | inout w13 | inout w14 | inout w15
| inout w16 | inout w17 | inout w18 | inout w19
| inout w20 | inout w21 | inout w22 | inout w23
| inout w24 | inout w25 | inout w26 | inout w27
| inout w28 | inout w29 | inout w30 | inout w31
| inout wmod | inout wrnd | inout wacc;

operand_type imm128: uint128 := const;
operand_type imm32: uint32 := const;

function uint32_xor(x: uint32, y: uint32): uint32 extern;
function uint32_or(x: uint32, y: uint32): uint32 extern;
function uint32_and(x: uint32, y: uint32): uint32 extern;
function uint32_not(x: uint32): uint32 extern;
function uint32_ls(x: uint32, amount: uint32): uint32 extern; 
function uint32_se(x: uint32, size: int): uint32 extern;

function uint256_hwb(x: uint256, v: uint128, lower: bool): uint256 extern;
function uint256_qmul(x: uint256, qx: uint2, y: uint256, qy: uint2): uint128 extern;
function uint256_and(x: uint256, y: uint256): uint256 extern;
function uint256_or(x: uint256, y: uint256): uint256 extern;
function uint256_add(x: uint256, y: uint256): uint256 extern;
function uint256_ls(x: uint256, num_bytes: int): uint256 extern;
function uint256_rs(x: uint256, num_bytes: int): uint256 extern;
function uint256_lh(a: uint256): uint128 extern;
function uint256_uh(a: uint256): uint128 extern;
function uint256_subb(x: uint256, y: uint256, cin: uint1): tuple(uint256, uint1) extern;

function otbn_xor(a: uint256, b: uint256, st: bool, sb: uint32): uint256 extern;
function otbn_or(a: uint256, b: uint256, st: bool, sb: uint32): uint256 extern;
function otbn_and(a: uint256, b: uint256, st: bool, sb: uint32): uint256 extern;
function otbn_add(a: uint256, b: uint256, st: bool, sb: uint32): tuple(uint256, flags_t) extern;
function otbn_addc(a: uint256, b: uint256, st: bool, sb: uint32, flgs: flags_t): tuple(uint256, flags_t) extern;
function otbn_addi(a: uint256, imm: uint32): tuple(uint256, flags_t) extern;
function otbn_addm(a: uint256, b: uint256, mod: uint256): uint256 extern;
function otbn_sub(a: uint256, b: uint256, st: bool, sb: uint32): tuple(uint256, flags_t) extern;
function otbn_subb(a: uint256, b: uint256, st: bool, sb: uint32, flgs: flags_t): tuple(uint256, flags_t) extern;
function otbn_subbi(a: uint256, b: uint256): tuple(uint256, flags_t) extern;
function otbn_subm(a: uint256, b: uint256, mod: uint256): uint256 extern;
function otbn_rshi(src1: uint256, src2: uint256, imm: uint32): uint256 extern;
function otbn_mulqacc_is_safe(shift: uint32, macc: uint256): bool extern;
function otbn_mulqacc_safe(zero: bool, a: uint256, qa: uint32, b: uint256, qb: uint32, shift: uint32, macc: uint256): uint256 extern;
function otbn_mulqacc(zero: bool, a: uint256, qa: uint32, b: uint256, qb: uint32, shift: uint32, macc: uint256): uint256 extern;

procedure lw(out grd: reg32, in offset: imm32, in grs1: reg32)
    {:instruction Ins32(LW(grd, grs1, offset))}
    reads
        xmem;
    requires
        valid_xmem_addr(xmem, grs1 + offset);
    ensures
        valid_xmem_addr(xmem, old(grs1) + offset);
        grd == xmem[old(grs1) + offset];
{
    assume false;
}

procedure sw(in grs2: reg32, in offset: imm32, in grs1: reg32)
    {:instruction Ins32(SW(grs2, grs1, offset))}
    modifies
        xmem;
    requires/ensures
        valid_xmem_addr(xmem, grs1 + offset);
    ensures
        xmem == old(xmem)[grs1 + offset := grs2];
{
    assume false;
}

procedure add(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(ADD(dst, src1, src2))}
    requires
       src1 + src2 < BASE_32;
    ensures
        dst == old(src1) + old(src2);
{
    assume false;
}

procedure addi(inout dst: reg32, in src1: reg32, in src2: imm32)
    {:instruction Ins32(ADDI(dst, src1, src2))}
    requires
       src1 + src2 < BASE_32;
    ensures
        dst = old(src1) + old(src2);
{
    assume false;
}

procedure sub(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(SUB(dst, src1, src2))}
    requires
        src1 - src2 >= 0;
    ensures
        dst == old(src1 - src2);
{
    assume false;
}

procedure and(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(AND(dst, src1, src2))}
    ensures
        dst == uint32_and(old(src1), old(src2));
{
    assume false;
}

procedure andi(inout dst: reg32, in src1: reg32, in src2: imm32)
    {:instruction Ins32(ANDI(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        dst == uint32_and(old(src1), uint32_se(old(src2), 12));
{
    assume false;
}

procedure or(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(OR(dst, src1, src2))}
    ensures
        dst == uint32_or(old(src1), old(src2));
{
    assume false;
}

procedure ori(inout dst: reg32, in src1: reg32, in src2: imm32)
    {:instruction Ins32(ORI(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        dst == uint32_or(old(src1), uint32_se(old(src2), 12));
{
    assume false;
}

procedure xor(inout dst: reg32, in src1: reg32, in src2: reg32)
    {:instruction Ins32(XOR(dst, src1, src2))}
    ensures
        dst == uint32_xor(old(src1), old(src2));
{
    assume false;
}

procedure xori(inout dst: reg32, in src1: reg32, in src2: imm32)
    {:instruction Ins32(XORI(dst, src1, src2))}
    requires
        src2 < 0x1000;
    ensures
        dst == uint32_xor(old(src1), uint32_se(old(src2), 12));
{
    assume false;
}

procedure lui32(inout dst: reg32, in src: imm32)
    {:instruction Ins32(LUI(dst, src))}
    requires
        src < 0x100000; // 20-bit immediate
    ensures
        dst == uint32_ls(old(src), 12);
{
    assume false;
}

// procedure csrrw(inout dst: reg32, inout csr: reg32, in src: reg32)

procedure li(inout dst: reg32, in imm: imm32)
    ensures
        dst == imm;
{
    assume false;    
}

procedure bn_xor(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5)
    {:instruction Ins256(BN_XOR(dst, src1, src2, st, sb))}
    ensures
        dst == otbn_xor(old(src1), old(src2), st, sb);
{
    assume false;
}

procedure bn_add(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5, inline which_group: uint1)
    {:instruction Ins256(BN_ADD(dst, src1, src2, st, sb, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_add(old(src1), old(src2), st, sb);
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    assume false;
}

procedure bn_addc(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5, inline which_group: uint1)
    {:instruction Ins256(BN_ADDC(dst, src1, src2, st, sb, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_addc(old(src1), old(src2), st, sb, select_fgroup(old(fgroups), which_group));
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    assume false;
}

procedure bn_addi(inout dst: reg256, in src: reg256, in imm: imm32, inline which_group: uint1)
    {:instruction Ins256(BN_ADDI(dst, src, imm, which_group))}
    requires
        imm < 1024;
    modifies
        fgroups;
    ensures
        let result := otbn_addi(old(src), imm);
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    assume false;
}

procedure bn_addm(inout dst: reg256, in src1: reg256, in src2: reg256)
    {:instruction Ins256(BN_ADDM(dst, src1, src2))}
    reads
        wmod;
    ensures
        dst == otbn_addm(old(src1), old(src2), old(wmod));
{
    assume false;
}

procedure bn_sub(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5, inline which_group: uint1)
    {:instruction Ins256(BN_SUB(dst, src1, src2, st, sb, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_sub(old(src1), old(src2), st, sb);
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    assume false;
}

procedure bn_subb(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5, inline which_group: uint1)
    {:instruction Ins256(BN_SUBB(dst, src1, src2, st, sb, which_group))}
    modifies
        fgroups;
    ensures
        let result := otbn_subb(old(src1), old(src2), st, sb, select_fgroup(old(fgroups), which_group));
        dst == fst(result) &&
        fgroups == update_fgroups(old(fgroups), which_group, snd(result));
{
    assume false; // TODO
}

// procedure bn_subi(inout dst: reg256, in src1: reg256, in src2: imm128, inline which_group: uint1)
//     {:instruction Ins256(BN_SUBI(dst, src1, src2, which_group))}
//     requires
//         src2 < 1024;
//     modifies
//         fgroups;
//     ensures
//         let result := otbn_subbi(old(src1), src2);
//         dst == fst(result) &&
//         fgroups == update_fgroups(old(fgroups), which_group, snd(result));
// {
//     assume false;
// }

// procedure bn_subm(inout dst: reg256, in src1: reg256, in src2: reg256)
//     {:instruction Ins256(BN_SUBM(dst, src1, src2))}
//     requires
//         false; // TODO: dst cannot be wmod
//     reads
//         wmod;
//     ensures
//         dst == otbn_subm(old(src1), old(src2), wmod);
// {
//     assume false;
// }

procedure bn_or(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5)
    {:instruction Ins256(BN_OR(dst, src1, src2, st, sb))}
    modifies
        fgroups;
    ensures
        dst == otbn_or(old(src1), old(src2), st, sb);
{
    assume false;
}

procedure bn_and(inout dst: reg256, in src1: reg256, in src2: reg256, inline st: bool, inline sb: uint5)
    {:instruction Ins256(BN_AND(dst, src1, src2, st, sb))}
    modifies
        fgroups;
    ensures
        dst == otbn_and(old(src1), old(src2), st, sb);
{
    assume false;
}

procedure bn_mulqacc_z(
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(true, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        wacc == otbn_mulqacc(true, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
{
    assume false;
}

procedure bn_mulqacc(
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(false, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        wacc == otbn_mulqacc(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
{
    assume false;
}

procedure bn_mulqacc_safe(
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(false, src1, qwsel1, src2, qwsel2, shift))}
    requires
        otbn_mulqacc_is_safe(shift, old(wacc));
    modifies
        wacc;
    ensures
        wacc == otbn_mulqacc_safe(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
{
    // TODO: call bn_mulqacc
    assume false;
}

procedure bn_mulqacc_so( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(false, src1, qwsel1, src2, qwsel2, shift))}
    modifies
        wacc;
    ensures
        let result := otbn_mulqacc(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
        // the upper half stay in wacc
        wacc == uint256_uh(result)
        // the lower half gets written back into dst
        && dst == uint256_hwb(old(dst), uint256_lh(result), lower);
{
    assume false;
}

procedure bn_mulqacc_so_safe( 
    inout dst: reg256,
    inline lower: bool,
    in src1: reg256, inline qwsel1: uint2,
    in src2: reg256, inline qwsel2: uint2,
    inline shift: uint2)
    {:instruction Ins256(BN_MULQACC(false, src1, qwsel1, src2, qwsel2, shift))}

    requires
        otbn_mulqacc_is_safe(shift, old(wacc));
    modifies
        wacc;
    ensures
        let result := otbn_mulqacc_safe(false, old(src1), qwsel1, old(src2), qwsel2, shift, old(wacc));
        // the upper half stay in wacc
        wacc == uint256_uh(result)
        // the lower half gets written back into dst
        && dst == uint256_hwb(old(dst), uint256_lh(result), lower);
{
    // TODO: call bn_mulqacc_so
    assume false;
}

function mod_add(a: int, b: int, m: int): int extern;

procedure bn_lid(
    inout grd: reg32, inline grd_inc: bool,
    in offset: imm32,
    inout grs: reg32, inline grs_inc: bool,
    ghost iter: iter_t)
    {:instruction Ins256(BN_LID(grd, grd_inc, offset, grs, grs_inc))}
    requires
        !(grd_inc && grs_inc);
        grd < 32;
        valid_wmem_addr(wmem, grs + offset, iter);

    reads
        wmem;

    modifies
        wdrs;

    ensures
        valid_wmem_addr(wmem, old(grs) + offset, iter);
        wdrs == old(wdrs[grd := wmem[iter.base_addr][iter.index]]);
        grd == (if grd_inc then mod_add(old(grd), 1, 32) else old(grd));
        grs == (if grs_inc then mod_add(old(grs), 32, BASE_32) else old(grs));
{
    assume false;
}

procedure bn_lid_safe(
    inout grd: reg32, inline grd_inc: bool,
    in offset: imm32,
    inout grs: reg32, inline grs_inc: bool,
    ghost iter: iter_t)
    returns (ghost next_iter: iter_t)

    requires
        !(grd_inc && grs_inc);
        if grd_inc then grd < 31 else grd < 32;
        valid_wmem_addr(wmem, grs + offset, iter);

    reads
        wmem;

    modifies
        wdrs;

    ensures
        grd == (if grd_inc then (old(grd) + 1) else old(grd));
        grs == (if grs_inc then (old(grs) + 32) else old(grs));

        wdrs == old(wdrs[grd := iter.buff[iter.index]]);

        admissible_wmem_addr(wmem, grs + offset, next_iter);
        next_iter == iter.(index := if grs_inc then iter.index + 1 else iter.index);
{
    next_iter := iter.(index := if grs_inc then iter.index + 1 else iter.index);
    bn_lid(grd, grd_inc, offset, grs, grs_inc, iter);
}

procedure bn_sid(
    inout grs2: reg32, inline grs2_inc: bool,
    in offset: imm32,
    inout grs1: reg32, inline grs1_inc: bool,
    ghost iter: iter_t)
    {:instruction Ins256(BN_SID(grs2, grs2_inc, offset, grs1, grs1_inc))}
    requires
        !(grs1_inc && grs2_inc);
        grs2 < 32;
        valid_wmem_addr(wmem, grs1 + offset, iter);

    reads
        wdrs;

    modifies
        wmem;

    ensures
        wmem == old(wmem[iter.base_addr := wmem[iter.base_addr][iter.index := wdrs[grs2]]]);
        grs2 == (if grs2_inc then mod_add(old(grs2), 1, 32) else old(grs2));
        grs1 == (if grs1_inc then mod_add(old(grs1), 32, BASE_32) else old(grs1));
{
    assume false;
}

procedure bn_sid_safe(
    inout grs2: reg32, inline grs2_inc: bool,
    in offset: imm32,
    inout grs1: reg32, inline grs1_inc: bool,
    ghost iter: iter_t)
    returns (ghost next_iter: iter_t)

    requires
        !(grs1_inc && grs2_inc);
        if grs2_inc then grs2 < 31 else grs2 < 32;
        valid_wmem_addr(wmem, grs1 + offset, iter);

    reads
        wdrs;

    modifies
        wmem;

    ensures
        wmem == old(wmem[iter.base_addr := iter.buff[iter.index := wdrs[grs2]]]);
        // next_iter == iter.(index := );
        grs1 == (if grs1_inc then (old(grs1) + 32) else old(grs1));
        grs2 == (if grs2_inc then (old(grs2) + 1) else old(grs2));

        admissible_wmem_addr(wmem, grs1 + offset, next_iter);
        next_iter.base_addr == iter.base_addr;
        next_iter.index == (if grs1_inc then iter.index + 1 else iter.index);
        // next_iter.buff == 
{
    ghost var new_buff := wmem[iter.base_addr][iter.index := wdrs[grs2]];
    ghost var new_index := if grs1_inc then iter.index + 1 else iter.index;
    next_iter := iter.(index := new_index).(buff := new_buff);
    bn_sid(grs2, grs2_inc, offset, grs1, grs1_inc, iter);
}

procedure bn_mov(inout dst: reg256, in src: reg256)
    {:instruction Ins256(BN_MOV(dst, src))}
    ensures
        dst == old(src);
{
    assume false;
}

procedure bn_movr(inout grd: reg32, inline grd_inc: bool, inout grs: reg32, inline grs_inc: bool)
    {:instruction Ins256(BN_MOVR(grd, grd_inc, grs, grs_inc))}
    requires
        !(grd_inc && grs_inc);
        if grd_inc then grd < 31 else grd < 32;
        if grs_inc then grs < 31 else grs < 32;

    modifies
        wdrs;

    ensures
        grd == (if grd_inc then (old(grd) + 1) else old(grd));
        grs == (if grs_inc then (old(grs) + 1) else old(grs));
        wdrs == old(wdrs[grd := wdrs[grs]]);
{
    assume false;
}

// procedure bn_rshi(inout dst: reg256, in src1: reg256, in src2: reg256, in imm: imm32)
//     {:instruction Ins256(BN_RSHI(dst, src1, src2, imm))}
//     requires
//         imm < 256;
//     ensures
//         dst == otbn_rshi(src1, src2, imm);
// {
//     assume false;
// }

procedure bn_sel(inout dst: reg256, in src1: reg256, in src2: reg256, inline which_group: uint1, inline flag: uint2)
    {:instruction Ins256(BN_SEL(dst, src1, src2, which_group))} 
    // TODO: sort out fg/flag
    reads
        fgroups;

    ensures
        dst == (if old(get_flag(fgroups, which_group, flag)) then old(src1) else old(src2));
{
    assume false;
}

#verbatim
} // end module bignum_decls
#endverbatim
