include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../spec/rsa_ops.dfy"
include "decls.dfy"

module cond_sub_to_reg {

import opened bv_ops
import opened vt_ops
import opened rsa_ops
import opened vt_consts
import opened vt_vale
import opened vt_decls

#endverbatim

ghost procedure seq_subb_nat_lemma(ghost xs: seq(uint256), ghost ys: seq(uint256), ghost zs: seq(uint256), ghost bout: uint1) extern;

procedure cond_sub_to_reg_inner(
    ghost initial_x8: uint32,
    ghost initial_wdrs: wdrs_t,
    ghost selection: bool,
    ghost iter: iter_t)

    returns (ghost next_iter: iter_t)

    requires
        selection == fgroups.fg1.cf;

        initial_x8 < 12;
        x8 == initial_x8 + iter.index;

        x12 == 30;
        x13 == 24;

        iter_safe(iter, wmem, x16);
        seq_len(iter.buff) == NUM_WORDS;

        wdrs[x8..initial_x8+NUM_WORDS] ==
            initial_wdrs[x8..initial_x8+NUM_WORDS];

        selection ==>
            tuple(wdrs[initial_x8..x8], bool_to_uint1(fgroups.fg0.cf))
            ==
            seq_subb(initial_wdrs[initial_x8..x8], iter.buff[..iter.index]);

        !selection ==>
            wdrs[initial_x8..x8] == initial_wdrs[initial_x8..x8];
    
    reads
        w3; w31; wmem;

    modifies
        fgroups;
        x8; x12; x13; x16;
        wdrs; w24; w29; w30;

    ensures
        selection == fgroups.fg1.cf;

        x8 == initial_x8 + next_iter.index;
        x12 == 30;
        x13 == 24;

        w3 == old(w3);
        w31 == old(w31);

        iter_inv(next_iter, wmem, x16);
        seq_len(next_iter.buff) == NUM_WORDS;

        wdrs[x8..initial_x8+NUM_WORDS] ==
            initial_wdrs[x8..initial_x8+NUM_WORDS];

        next_iter.base_addr == iter.base_addr;
        next_iter.index == iter.index + 1;

        selection ==>
            tuple(wdrs[initial_x8..x8], bool_to_uint1(fgroups.fg0.cf))
            ==
            seq_subb(initial_wdrs[initial_x8..x8], next_iter.buff[..next_iter.index]);

        !selection ==>
            wdrs[initial_x8..x8] == initial_wdrs[initial_x8..x8];
{
    // assert x8 <= initial_x8 + 12;
    ghost var widx := x8;

    /* load limb of subtrahend (input B) to w24 */
    next_iter := bn_lid_safe(x13, false, 0, x16, true, iter);
    assert w24 == iter.buff[iter.index];

    /* load limb of minuend (input C) to w30 */
    bn_movr(x12, false, x8, false);
    assert w30 == wdrs[widx];

    /* perform subtraction for a limb */
    bn_subb(w29, w30, w24, SFT_DFT, 0);

    /* conditionally select subtraction result or unmodified limb */
    bn_sel(w24, w29, w30, 1, 0);

    /* store selection result in reg file */
    bn_movr(x8, true, x13, false);
    // assert x8 ==widx + 1; 
    assert wdrs[widx] == w24;

    ghost if (selection) {
        ghost var x := initial_wdrs[widx];
        ghost var y := next_iter.buff[iter.index];
        ghost var z := wdrs[widx];
        
        ghost var xs := initial_wdrs[initial_x8..widx];
        ghost var ys := iter.buff[..iter.index];
        ghost var zs := old(wdrs[initial_x8..widx]);

        assert initial_wdrs[initial_x8..x8] == seq_append(xs, x);
        assert next_iter.buff[..next_iter.index] == seq_append(ys, y);
        assert wdrs[initial_x8..x8] == seq_append(zs, z);

        assume false; // TODO: unstable
    } else {
        calc == {
            wdrs[initial_x8..x8];
            ==
            seq_append(wdrs[initial_x8..widx], wdrs[widx]);
            == { assert wdrs[initial_x8..widx] == initial_wdrs[initial_x8..widx]; }
            seq_append(initial_wdrs[initial_x8..widx], wdrs[widx]);
            == { assert wdrs[widx] == initial_wdrs[widx]; }
            seq_append(initial_wdrs[initial_x8..widx], initial_wdrs[widx]);
            ==
            initial_wdrs[initial_x8..x8];
        }
    }

}

procedure cond_sub_to_reg(
    ghost prev_a_view: seq(uint256),
    ghost iter: iter_t,
    ghost selection: bool)
    returns (ghost a_view: seq(uint256))

    requires
        x8 == 4;
        x30 == NUM_WORDS;

        fgroups.fg1.cf == selection;
        fgroups.fg0.cf == false;

        valid_wdr_view(wdrs, prev_a_view, 4, NUM_WORDS);
        
        iter_safe(iter, wmem, x16);
        iter.index == 0;
        seq_len(iter.buff) == NUM_WORDS;

    reads
        x30; w3; w31; wmem;

    modifies
        fgroups;
        x8; x12; x13; x16;
        wdrs; w24; w29; w30;

    ensures
        w3 == old(w3);
        w31 == old(w31);
        valid_wdr_view(wdrs, a_view, 4, NUM_WORDS);

        selection ==>
            to_nat(a_view) - pow_B256(NUM_WORDS) * bool_to_uint1(fgroups.fg0.cf)
            ==
            to_nat(prev_a_view) - to_nat(iter.buff);

        !selection ==>
            to_nat(a_view) == to_nat(prev_a_view);
{
    /* load pointers to temp regs */
    li(x12, 30);
    li(x13, 24);

    ghost var initial_wdrs := wdrs;
    ghost var initial_x8 := x8;
    ghost var initial_x16 := x16;
    ghost var iter := iter_cons(x16, 0, wmem[x16]);

    /* iterate over all limbs for conditional limb-wise subtraction */
    while (Loop(x30))
        invariant
            iter.index + loop_ctr == NUM_WORDS;

            selection == fgroups.fg1.cf;

            x8 == initial_x8 + iter.index;
            x12 == 30;
            x13 == 24;
            
            w3 == old(w3);
            w31 == old(w31);

            iter_inv(iter, wmem, x16);
            seq_len(iter.buff) == NUM_WORDS;
            iter.base_addr == initial_x16;

            wdrs[x8..initial_x8+NUM_WORDS]
                == initial_wdrs[x8..initial_x8+NUM_WORDS];

        selection ==>
            tuple(wdrs[initial_x8..x8], bool_to_uint1(fgroups.fg0.cf))
            ==
            seq_subb(initial_wdrs[initial_x8..x8], iter.buff[..iter.index]);

        !selection ==>
            wdrs[initial_x8..x8] == initial_wdrs[initial_x8..x8];

        decreases loop_ctr;
    {
        iter := cond_sub_to_reg_inner(initial_x8, initial_wdrs, selection, iter);
    }

    assert iter.buff[..iter.index] == iter.buff;
    assert iter.buff == wmem[old(x16)];

    ghost if (selection) {
        seq_subb_nat_lemma(old(wdrs[x8..x8+NUM_WORDS]),old(wmem[x16]),
            wdrs[old(x8)..old(x8)+NUM_WORDS], bool_to_uint1(fgroups.fg0.cf));
    }
    a_view := wdrs[old(x8)..old(x8)+NUM_WORDS];
}


#verbatim
}
#endverbatim
