include "decls.vad"

#verbatim
include "../code/vale.dfy"
include "../spec/rsa_ops.dfy"
include "decls.dfy"

include "../code/subb_lemmas.dfy"

module cond_sub_to_reg {

import opened bv_ops
import opened vt_ops
import opened rsa_ops
import opened vt_consts
import opened vt_vale
import opened vt_decls
import opened subb_lemmas

#endverbatim

function subb_inv(dst: seq(uint256),
    carry: uint1,
    src1: seq(uint256),
    src2: seq(uint256),
    index: int) : bool extern;

ghost procedure subb_inv_peri_lemma(
    ghost dst: seq(uint256),
    ghost new_carry: uint1,
    ghost src1: seq(uint256),
    ghost src2: seq(uint256),
    ghost old_carry: uint1,
    ghost index: int) extern;

ghost procedure subb_inv_post_lemma(
    ghost dst: seq(uint256),
    ghost carry: uint1,
    ghost src1: seq(uint256),
    ghost src2: seq(uint256)) extern;

procedure cond_sub_to_reg_inner(
    ghost init_view: seq(uint256),
    ghost prev_view: seq(uint256),
    ghost selection: bool,
    ghost iter: iter_t)

    returns (
        ghost next_view: seq(uint256),
        ghost next_iter: iter_t)

    requires
        x8 == 4 + iter.index;
        x12 == 30;
        x13 == 24;

        iter_safe(iter, wmem, x16);
        seq_len(iter.buff) == NUM_WORDS;

        valid_wdr_view(wdrs, prev_view, 4, NUM_WORDS);

        seq_len(init_view) == NUM_WORDS;
        init_view[iter.index..] == wdrs[x8..4 + NUM_WORDS];

        selection == fgroups.fg1.cf;

        selection ==>
            subb_inv(prev_view, bool_to_uint1(fgroups.fg0.cf), init_view, iter.buff, iter.index);

        !selection ==>
            init_view[..iter.index] == wdrs[4..x8];
    
    reads
        w3; w31; wmem;

    modifies
        x8; x12; x13; x16;
        w24; w29; w30;
        wdrs; fgroups;

    ensures
        selection == fgroups.fg1.cf;

        x8 == 4 + next_iter.index;
        x12 == 30;
        x13 == 24;

        w3 == old(w3);
        w31 == old(w31);

        iter_inv(next_iter, wmem, x16);
        next_iter == bn_lid_next_iter(iter, true);

        valid_wdr_view(wdrs, next_view, 4, NUM_WORDS);

        init_view[next_iter.index..] == wdrs[x8..4 + NUM_WORDS];

        selection == fgroups.fg1.cf;

        selection ==>
            subb_inv(next_view, bool_to_uint1(fgroups.fg0.cf), init_view, next_iter.buff, next_iter.index);

        !selection ==>
            init_view[..next_iter.index] == wdrs[4..x8];
{
    ghost var widx := x8;

    /* load limb of subtrahend (input B) to w24 */
    next_iter := bn_lid_safe(x13, false, 0, x16, true, iter);
    assert w24 == iter.buff[iter.index];

    /* load limb of minuend (input C) to w30 */
    bn_movr(x12, false, x8, false);
    assert w30 == init_view[iter.index];

    /* perform subtraction for a limb */
    let old_carry := bool_to_uint1(fgroups.fg0.cf);
    bn_subb(w29, w30, w24, SFT_DFT, 0);
    let new_carry := bool_to_uint1(fgroups.fg0.cf);

    /* conditionally select subtraction result or unmodified limb */
    bn_sel(w24, w29, w30, 1, 0);

    /* store selection result in reg file */
    bn_movr(x8, true, x13, false);
    next_view := prev_view[iter.index := w24];
    assert valid_wdr_view(wdrs, next_view, 4, NUM_WORDS);

    ghost if (selection) {
        subb_inv_peri_lemma(next_view, new_carry, init_view, next_iter.buff, old_carry, iter.index);
    }
}

procedure cond_sub_to_reg(
    ghost init_view: seq(uint256),
    ghost init_iter: iter_t,
    ghost selection: bool)

    returns (ghost curr_view: seq(uint256))

    requires
        x8 == 4;
        x30 == NUM_WORDS;

        fgroups.fg1.cf == selection;
        fgroups.fg0.cf == false;

        valid_wdr_view(wdrs, init_view, 4, NUM_WORDS);
        
        iter_safe(init_iter, wmem, x16);
        init_iter.index == 0;
        seq_len(init_iter.buff) == NUM_WORDS;

    reads
        x30; w3; w31; wmem;

    modifies
        fgroups;
        x8; x12; x13; x16;
        wdrs; w24; w29; w30;

    ensures
        w3 == old(w3);
        w31 == old(w31);
        valid_wdr_view(wdrs, curr_view, 4, NUM_WORDS);

        selection ==>
            to_nat(curr_view)
                ==
            to_nat(init_view) - to_nat(init_iter.buff) + bool_to_uint1(fgroups.fg0.cf) * pow_B256(NUM_WORDS);

        !selection ==>
            to_nat(curr_view) == to_nat(init_view);
{
    /* load pointers to temp regs */
    li(x12, 30);
    li(x13, 24);

    ghost var initial_x16 := x16;

    curr_view := init_view;
    ghost var iter := init_iter;

    /* iterate over all limbs for conditional limb-wise subtraction */
    while (Loop(x30))
        invariant
            x8 == 4 + iter.index;
            x12 == 30;
            x13 == 24;

            w3 == old(w3);
            w31 == old(w31);

            iter_inv(iter, wmem, x16);
            iter.buff == init_iter.buff;
            iter.index + loop_ctr == NUM_WORDS;

            valid_wdr_view(wdrs, curr_view, 4, NUM_WORDS);

            seq_len(init_view) == NUM_WORDS;
            init_view[iter.index..] == wdrs[x8..4 + NUM_WORDS];

            selection == fgroups.fg1.cf;

            selection ==>
                subb_inv(curr_view, bool_to_uint1(fgroups.fg0.cf), init_view, iter.buff, iter.index);

            !selection ==>
                init_view[..iter.index] == wdrs[4..x8];

        decreases loop_ctr;
    {
        curr_view, iter := cond_sub_to_reg_inner(init_view, curr_view, selection, iter);
    }

    ghost if (selection) {
        subb_inv_post_lemma(curr_view, bool_to_uint1(fgroups.fg0.cf), init_view, iter.buff);
    } else {
        assert wdrs[4..x8] == curr_view;
        assert curr_view == init_view;
    }
}


#verbatim
}
#endverbatim
