include "decls.vad"

#verbatim
include "../code/vale.dfy"

include "../spec/def.dfy"
include "../spec/ops.dfy"
include "../spec/types.dfy"

include "../gen/decls.dfy"

// include "../code/rsa_leammas.dfy"

module barrett384 {

import opened bignum_vale

import opened bignum_def
import opened ops
import opened types
// import opened rsa_leammas

import opened bignum_decls

#endverbatim

function interp_wdr_seq(start: int, end: int): int extern;

//  FG1.C: s, selection flag
procedure cond_sub_mod()
    requires
        w31 == 0;
        x16 < 0xfffffe60;
        forall(i:int) 0 <= i < 12 ==>
            Valid256Addr(wmem, old(x16) + 32 * i);
    modifies
        x8; x10; x11; x16;
        fgroups; wmem;
        wregs; w2; w3; w4; w31;
{
    ghost var selection := get_cf1(fgroups);

    li(x8, 5);
    li(x10, 3);
    li(x11, 2);

    bn_add(w31, w31, w31, false, 0, 0);
    ghost var i : int := 0;

    while (LoopImm(12))
        invariant i + loop_ctr == 12;
        invariant x8 == 5 + i;
        invariant x11 == 2;
        invariant x10 == 3;
        invariant x16 == old(x16) + 32 * i;

        invariant get_cf1(fgroups) == selection;

        invariant forall(i:int) 0 <= i < 12
            ==> Valid256Addr(wmem, old(x16) + 32 * i);

        invariant !selection
            ==> (forall(i:int) 0 <= i < 12
            ==> wregs[Wdr(5 + i)] == old(wregs[Wdr(5 + i)]));

        // invariant !selection ==>
        //     interp_wdr_seq(wregs, 5, 5 + i) == interp_wdr_seq(old(wregs), 5, 5 + i);

        decreases loop_ctr;
    {
        // assert Valid256Addr(wmem, old(x16) + 32 * i);
        bn_lid_safe(x10, false, 0, x16, true);
        assert w3 == wmem[old(x16) + 32 * i];

        bn_movr(x11, false, x8, false);
        assert w2 == wregs[Wdr(5 + i)];
        ghost var old_limb := w2;

        ghost var cf := get_cf0(fgroups);
        ghost var fg := select_fgroup(fgroups, 0);
        bn_subb(w4, w2, w3, false, 0, 0);
        ghost var cf' := get_cf0(fgroups);
        ghost var result := otbn_subb(w2, w3, false, 0, fg);
        assert w4 == fst(result);

        ghost var carry := if cf then 1 else 0;
        ghost var diff : int := w2 - w3 - carry;
        assert cf' == (diff < 0);
        // assert w4 == diff % BASE_256;

        bn_sel(w3, w4, w2, 1, 0);
        assert if selection then (w3 == w4) else (w3 == w2);

        bn_movr(x8, true, x10, false);
        // assert wregs[Wdr(5 + i)] == w3;
        // assert !selection ==> (wregs[Wdr(5 + i)] == old_limb);

        i := i + 1;
    }
}

#verbatim
}
#endverbatim
