include "decls.vad"
include "montmul.vad"

#verbatim
include "montmul.dfy"
include "../code/modexp_var_lemmas.dfy"

module modexp_var {

import opened bv_ops
import opened vt_ops
import opened rsa_ops
import opened vt_consts
import opened vt_vale
import opened vt_decls
import opened powers
import opened congruences

import opened mont_loop
import opened montmul
import opened mont_loop_lemmas
import opened modexp_var_lemmas
import opened subb_lemmas

#endverbatim

ghost procedure xor_clear_lemma(ghost x: uint256) extern;

function modexp_var_inv(a: nat, sig: nat, i: nat, rsa: rsa_params): bool extern;

ghost procedure modexp_var_inv_pre_lemma(
    ghost a_view: seq(uint256),
    ghost rr: seq(uint256),
    ghost sig: seq(uint256),
    ghost rsa: rsa_params) extern;

ghost procedure modexp_var_inv_peri_lemma(
    ghost a_view: seq(uint256),
    ghost next_a_view: seq(uint256),
    ghost sig: nat,
    ghost i: nat,
    ghost rsa: rsa_params) extern;

ghost procedure modexp_var_inv_post_lemma(
    ghost a_view: seq(uint256),
    ghost next_a_view: seq(uint256),
    ghost sig: seq(uint256),
    ghost rsa: rsa_params) extern;

function subb_inv(dst: seq(uint256),
    carry: uint1,
    src1: seq(uint256),
    src2: seq(uint256),
    index: int) : bool extern;

ghost procedure subb_inv_peri_lemma(
    ghost dst: seq(uint256),
    ghost new_carry: uint1,
    ghost src1: seq(uint256),
    ghost src2: seq(uint256),
    ghost old_carry: uint1,
    ghost index: int) extern;

ghost procedure subb_inv_post_lemma(
    ghost dst: seq(uint256),
    ghost carry: uint1,
    ghost src1: seq(uint256),
    ghost src2: seq(uint256)) extern;

procedure compute_m0inv(ghost vars: mm_vars)
    requires
        mm_vars_safe(vars, wmem, NA, NA, NA, NA, x17);

    modifies
        fgroups; wmem;
        x8; x17; w0; w1; w28; w29;
    
    reads
        xmem; x16;

    ensures
        x17 == old(17);
        mm_vars_safe(vars, wmem, NA, NA, NA, NA, x17);
        wmem == old(wmem)[x17 := seq(vars.rsa.m0d)];
{
    assume false;
}

procedure compute_rr(ghost vars: mm_vars)
    {: frame false}

    requires
        mm_vars_safe(vars, wmem, NA, NA, x16, x18, x17);
        to_nat(vars.m_it.buff) == vars.rsa.m;
        vars.m0d_iter.buff[0] == vars.rsa.m0d;

    ensures
        x16 == old(16);
        x18 == old(18);
        x17 == old(17);
        x29 == old(x29);
        x30 == old(x30);
        x31 == old(x31);

        w31 == old(w31);

        mm_vars_safe(vars, wmem, NA, NA, x16, x18, x17);
        to_nat(vars.m_it.buff) == vars.rsa.m;
        to_nat(vars.m0d_iter.buff) == vars.rsa.m0d;
        to_nat(vars.rr_iter.buff) == vars.rsa.RR;

        wmem == old(wmem)[x18 := wmem[x18]];
        xmem == old(xmem);
{
    assume false;
}

procedure modexp_var_0(ghost vars: mm_vars)

    {:frame false}

    requires
        valid_xmem_addr(xmem, 0);  // e'
        xmem[0] == vars.rsa.e';

        valid_xmem_addr(xmem, 4);
        xmem[4] == NUM_WORDS;

        valid_xmem_addr(xmem, 8);  // m0d
        valid_xmem_addr(xmem, 12); // rr
        valid_xmem_addr(xmem, 16); // m
        valid_xmem_addr(xmem, 20); // sig

        mm_vars_safe(vars, wmem, NA, xmem[20], xmem[16], xmem[12], xmem[8]);
        to_nat(vars.m_it.buff) == vars.rsa.m;

        xmem[20] != xmem[8];
        xmem[20] != xmem[12];

    ensures
        x29 == vars.rsa.e';
        x30 == NUM_WORDS;
        x31 == NUM_WORDS - 1;

        w31 == 0;

        xmem == old(xmem); 
        mm_vars_inv(vars, wmem, NA, xmem[20], x16, x18, x17);
        wmem == old(wmem)[x17 := seq(vars.rsa.m0d)][x18 := wmem[x18]];
{
    xor_clear_lemma(w31);
    bn_xor(w31, w31, w31, SFT_DFT);

    lw(x30, 4, x0);

    addi(x31, x0, 1); // TODO: use one instruction instead
    sub(x31, x30, x31);

    lw(x16, 16, x0);

    lw(x17, 8, x0);

    lw(x18, 12, x0);

    lw(x29, 0, x0);

    // TODO: figure out if these will be pre-computed
    compute_m0inv(vars);
    compute_rr(vars);

    // TODO: it is easier to restore pointers in the procedures
    // lw        x16, 16(x0)
    // lw        x17, 8(x0)
    // lw        x18, 12(x0)
}

procedure write_to_dmem(ghost iter: iter_t)
    returns (ghost next_iter: iter_t)

    requires
        x8 == 4;
        x30 == NUM_WORDS;

        iter_safe(iter, wmem, x21);
        seq_len(iter.buff) == NUM_WORDS;
        iter.index == 0;
    
    modifies
        x8; x21; wmem;
    
    reads
        x30; wdrs;

    ensures
        iter_inv(next_iter, wmem, iter.base_addr);
        next_iter.base_addr == iter.base_addr;
        seq_len(next_iter.buff) == NUM_WORDS;
        next_iter.buff == wdrs[4..4+NUM_WORDS];
        iter.index == 0;

        wmem == old(wmem)[next_iter.base_addr := next_iter.buff];
{
    next_iter := iter;

    while (Loop(x30))
        invariant
            x8 == 4 + next_iter.index;

            iter_inv(next_iter, wmem, x21);
            next_iter.index + loop_ctr == NUM_WORDS;
            seq_len(next_iter.buff) == NUM_WORDS;

            next_iter.buff[..next_iter.index] == wdrs[4..4+next_iter.index];
            wdrs == old(wdrs);

            next_iter.base_addr == iter.base_addr;
            wmem == old(wmem)[next_iter.base_addr := next_iter.buff];

        decreases
            loop_ctr;
    {   
        ghost var index := next_iter.index;
        ghost var last_iter := next_iter;

        next_iter := bn_sid_safe(x8, false, 0, x21, true, next_iter);
        addi(x8, x8, 1);

        assert next_iter.buff[index] == wdrs[4+index];
    }

    next_iter := next_iter.(index := 0);
}

procedure sub_mod(
    ghost raw_view: seq(uint256),
    ghost initial_m_it: iter_t)

    returns (ghost adjusted_view: seq(uint256))

    requires
        x8 == 4;
        x9 == 3;
        x11 == 2;
        x30 == NUM_WORDS;

        w31 == 0;

        mm_it_inv(initial_m_it, wmem, x16);
        valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);

    reads
        x30;
        wmem;

    modifies
        x8; x9; x11; x16; x17;
        w2; w3; w31;
        fgroups; wdrs;
    
    ensures
        valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);
        valid_wdr_view(wdrs, adjusted_view, 16, NUM_WORDS);

        !fgroups.fg0.cf ==> to_nat(raw_view) - to_nat(initial_m_it.buff) == to_nat(adjusted_view);
        fgroups.fg0.cf ==> to_nat(raw_view) < to_nat(initial_m_it.buff);
{
    bn_add(w31, w31, w31, SFT_DFT, 0);
    assert fgroups.fg0.cf == false;

    li(x17, 16);
    ghost var m_it := initial_m_it;
    adjusted_view := wdrs[16..16+NUM_WORDS];

    while (Loop(x30))
        invariant
            iter_inv(m_it, wmem, x16);
            m_it.base_addr == initial_m_it.base_addr;
            m_it.index == NUM_WORDS - loop_ctr;
            seq_len(m_it.buff) == NUM_WORDS;

            x9 == 3;
            x11 == 2;
            x8 == 4 + m_it.index;
            x17 == 16 + m_it.index;

            valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);
            valid_wdr_view(wdrs, adjusted_view, 16, NUM_WORDS);

            subb_inv(adjusted_view, bool_to_uint1(fgroups.fg0.cf),
                raw_view, m_it.buff, m_it.index);

        decreases
            loop_ctr;
    {
        ghost var index := m_it.index;
        bn_movr(x11, false, x8, true);

        m_it := bn_lid_safe(x9, false, 0, x16, true, m_it);

        let old_carry := bool_to_uint1(fgroups.fg0.cf);
        bn_subb(w2, w2, w3, SFT_DFT, 0);
        let new_carry := bool_to_uint1(fgroups.fg0.cf);

        bn_movr(x17, true, x11, false);
        adjusted_view := adjusted_view[index := w2];

        assert tuple(w2, new_carry) ==
            uint256_subb(raw_view[index], m_it.buff[index], old_carry);

        subb_inv_peri_lemma(adjusted_view, new_carry, raw_view, m_it.buff, old_carry, index);
    }
    
    let new_carry := bool_to_uint1(fgroups.fg0.cf);
    subb_inv_post_lemma(adjusted_view, new_carry, raw_view, m_it.buff);
}

ghost procedure modexp_var_correct_lemma(
    ghost raw_view: nat,
    ghost adjusted_view: nat,
    ghost carry: bool,
    ghost rsa: rsa_params) extern;

function mod(a: int, n: int): int extern;

procedure modexp_write_ouput(
    ghost raw_view: seq(uint256),
    ghost adjusted_view: seq(uint256),
    ghost carry: bool,
    ghost sig: nat,
    ghost rsa: rsa_params)
returns (ghost out_iter: iter_t)

    {:frame false }

    requires
        valid_xmem_addr(xmem, 28); // out
        valid_wmem_base_addr(wmem, xmem[28], NUM_WORDS);

        NUM_WORDS == x30;

        rsa_params_inv(rsa);

        valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);
        valid_wdr_view(wdrs, adjusted_view, 16, NUM_WORDS);

        carry == fgroups.fg0.cf;
        carry ==> to_nat(raw_view) == mod(power(sig, rsa.e), rsa.m);
        !carry ==> to_nat(adjusted_view) == mod(power(sig, rsa.e), rsa.m);
    
    ensures
        iter_inv(out_iter, wmem, x21);
        to_nat(out_iter.buff) == mod(power(sig, rsa.e), rsa.m);
{
    lw(x21, 28, x0);
    li(x8, 4);
    li(x9, 2);
    li(x10, 3);
    li(x17, 16);

    out_iter := iter_cons(x21, 0, wmem[x21]);

    while (Loop(x30))
        invariant
            x9 == 2;
            x8 == 4 + out_iter.index;
            x10 == 3;
            x17 == 16 + out_iter.index;
            carry == fgroups.fg0.cf;

            iter_inv(out_iter, wmem, x21);
            out_iter.index + loop_ctr == NUM_WORDS;
            seq_len(out_iter.buff) == NUM_WORDS;

            valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);
            valid_wdr_view(wdrs, adjusted_view, 16, NUM_WORDS);

            carry ==> out_iter.buff[..out_iter.index] == raw_view[..out_iter.index];
            !carry ==> out_iter.buff[..out_iter.index] == adjusted_view[..out_iter.index];

        decreases
            loop_ctr;
    {
        let index := out_iter.index;
        bn_movr(x9, false, x8, true);
        assert w2 == raw_view[index];

        bn_movr(x10, false, x17, true);
        assume w3 == adjusted_view[index];
   
        bn_sel(w2, w2, w3, 0, 0);
        ghost if (carry) {
            assert w2 == raw_view[index];
        } else {
            assert w2 == adjusted_view[index];
        }
        out_iter := bn_sid_safe(x9, false, 0, x21, true, out_iter);
    }

    assert out_iter.buff == out_iter.buff[..NUM_WORDS];
    assert raw_view == raw_view[..out_iter.index];
    assert adjusted_view == adjusted_view[..out_iter.index];
}

procedure modexp_var(
    ghost initial_vars: mm_vars)
    returns (ghost out_iter: iter_t)

    {:frame false}
    
    requires
        valid_xmem_addr(xmem, 0);  // e'
        xmem[0] == initial_vars.rsa.e';

        valid_xmem_addr(xmem, 4);
        xmem[4] == NUM_WORDS;

        valid_xmem_addr(xmem, 8);  // m0d
        valid_xmem_addr(xmem, 12); // rr
        valid_xmem_addr(xmem, 16); // m
        valid_xmem_addr(xmem, 20); // sig
        valid_xmem_addr(xmem, 28); // out

        mm_vars_safe(initial_vars, wmem, 
            NA, xmem[20], xmem[16], xmem[12], xmem[8]);

        to_nat(wmem[xmem[20]]) == initial_vars.rsa.sig;

        valid_wmem_base_addr(wmem, xmem[28], NUM_WORDS);

        to_nat(initial_vars.m_it.buff) == initial_vars.rsa.m;

        xmem[20] != xmem[8];
        xmem[20] != xmem[12];

        xmem[28] != xmem[8];
        xmem[28] != xmem[12];
        xmem[28] != xmem[16];
        xmem[28] != xmem[20];

    ensures
        // out_iter contains a valid view of memory
        iter_inv(out_iter, wmem, x21);
        // out_iter contains the right value
        let rsa := initial_vars.rsa in 
        to_nat(out_iter.buff) == mod(power(rsa.sig, rsa.e), rsa.m);
{
    ghost var a_view: seq(uint256);
    
    modexp_var_0(initial_vars);

    li(x8, 4);
    li(x9, 3);
    li(x10, 4);
    li(x11, 2);

    lw(x19, 20, x0);
    addi(x20, x18, 0);
    lw(x21, 28, x0);

    let sig_iter := iter_cons(x19, 0, wmem[x19]);
    let rr_iter := iter_cons(x20, 0, wmem[x20]);

    ghost var vars := initial_vars.(x_it := rr_iter).(y_it := sig_iter);
    a_view := montmul(vars);

    let out_addr := xmem[28];
    out_iter := iter_cons(out_addr, 0, wmem[out_addr]);
    out_iter := write_to_dmem(out_iter);

    vars := vars.(x_it := out_iter).(y_it := out_iter);

    modexp_var_inv_pre_lemma(a_view, rr_iter.buff, sig_iter.buff, vars.rsa);

    ghost var i : nat := 0;

    while (Loop(x29))
        invariant
            x9 == 3;
            x10 == 4;
            x11 == 2;
        
            x30 == NUM_WORDS;
            x31 == NUM_WORDS - 1;

            w31 == 0;

            initial_vars.rsa == vars.rsa;

            mm_it_inv(sig_iter, wmem, sig_iter.base_addr);
            valid_xmem_addr(xmem, 20);
            xmem[20] == sig_iter.base_addr;

            valid_xmem_addr(xmem, 28);
            xmem[28] == out_addr;

            iter_safe(out_iter, wmem, out_addr);
            seq_len(out_iter.buff) == NUM_WORDS;
            out_iter.index == 0;
            out_iter.buff == a_view;

            mm_vars_inv(vars, wmem, out_addr, out_addr, x16, NA, x17);
            to_nat(sig_iter.buff) == vars.rsa.sig;
            modexp_var_inv(to_nat(a_view), vars.rsa.sig, i, vars.rsa);

            out_addr != x16;
            out_addr != x17;

            i + loop_ctr == vars.rsa.e'; 

        decreases
            loop_ctr;
    {
        lw(x19, 28, x0);
        lw(x20, 28, x0);
        lw(x21, 28, x0);

        let prev_a_view := a_view;
        a_view := montmul(vars);

        out_iter := write_to_dmem(out_iter);
        
        vars := vars.(x_it := out_iter).(y_it := out_iter);

        modexp_var_inv_peri_lemma(prev_a_view, a_view, vars.rsa.sig, i, vars.rsa);
    
        i := i + 1;
    }

    lw(x19, 20, x0);
    lw(x20, 28, x0);
    lw(x21, 28, x0);
    let prev_a_view := a_view;

    vars := vars.(x_it := out_iter).(y_it := sig_iter);
    a_view := montmul(vars);

    modexp_var_inv_post_lemma(prev_a_view, a_view, sig_iter.buff, vars.rsa);

    ghost var raw_view := wdrs[4..4+NUM_WORDS];
    let adjusted_view := sub_mod(raw_view, vars.m_it);
    
    let carry := fgroups.fg0.cf;
    modexp_var_correct_lemma(to_nat(raw_view), to_nat(adjusted_view), carry, vars.rsa);

    out_iter := modexp_write_ouput(raw_view, adjusted_view, carry, vars.rsa.sig, vars.rsa);
}


#verbatim
}
#endverbatim
