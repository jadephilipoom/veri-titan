type seq(a: Type(0)): Type(0) {: primitive} extern;
function operator([]) #[a: Type(0)](s: seq(a), i: int): a extern; 
function operator([ := ]) #[a: Type(0)](s: seq(a), i: int, v: a): seq(a) extern;
function operator([ .. ]) #[a: Type(0)](s: seq(a), begin: int, end: int): seq(a) extern;
function seq_len #[a: Type(0)] (s: seq(a)): nat extern;
function seq_concat #[a: Type(0)](x: seq(a), y: seq(a)): seq(a) extern;
function seq_append #[a: Type(0)](xs: seq(a), x: a): seq(a) extern;

type map(a: Type(0), b: Type(0)): Type(0) extern;
function operator(?[]) #[a:Type(0), b:Type(0)](m:map(a, b), k:a):bool extern;
function operator([]) #[a: Type(0), b: Type(0)](m: map(a, b), k: a): b extern;
function operator([ := ]) #[a: Type(0), b: Type(0)](m: map(a, b), k: a, v: b): map(a, b) extern;

type set(a: Type(0)): Type(0) extern;
function operator(?[]) #[a:Type(0)](m:set(a), k:a):bool extern;

function fst #[a: Type(0), b: Type(0)](m: tuple(a, b)): a extern;
function snd #[a: Type(0), b: Type(0)](m: tuple(a, b)): b extern;

type nat:     Type(0) := int_range(0, _);
type uint1:   Type(0) := int_range(0, 1);
type uint2:   Type(0) := int_range(0, 3);
type uint5:   Type(0) := int_range(0, 31);
type uint8:   Type(0) := int_range(0, 255);
type int16:   Type(0) := int_range((-32768), 32767);
type uint16:  Type(0) := int_range(0, 65535);
type uint32:  Type(0) := int_range(0, 0xffffffff);