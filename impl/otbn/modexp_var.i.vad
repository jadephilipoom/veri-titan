include "../../arch/otbn/decls.i.vad"
include "montmul.i.vad"

#verbatim

include "../../arch/otbn/decls.i.dfy"

include "montmul.i.dfy"

include "../../../lib/bv256_mm_lemmas.s.dfy"

module modexp_var {

import opened ot_machine
import opened ot_abstraction
import opened ot_decls
import opened ot_vale

import opened mont_loop
import opened montmul

import opened Power

import opened integers
import opened bv256_mm_lemmas

#endverbatim

ghost procedure xor_clear_lemma(ghost x: uint256) extern;

function modexp_var_inv(a: nat, i: nat, rsa: rsa_params): bool extern;

ghost procedure modexp_var_inv_pre_lemma(
    ghost a_view: seq(uint256),
    ghost rr: seq(uint256),
    ghost sig: seq(uint256),
    ghost rsa: rsa_params) extern;

ghost procedure modexp_var_inv_peri_lemma(
    ghost a_view: seq(uint256),
    ghost next_a_view: seq(uint256),
    ghost i: nat,
    ghost rsa: rsa_params) extern;

ghost procedure modexp_var_inv_post_lemma(
    ghost a_view: seq(uint256),
    ghost next_a_view: seq(uint256),
    ghost sig: seq(uint256),
    ghost rsa: rsa_params) extern;

function subb_inv(dst: seq(uint256),
    carry: uint1,
    src1: seq(uint256),
    src2: seq(uint256),
    index: int) : bool extern;

ghost procedure subb_inv_peri_lemma(
    ghost dst: seq(uint256),
    ghost new_carry: uint1,
    ghost src1: seq(uint256),
    ghost src2: seq(uint256),
    ghost old_carry: uint1,
    ghost index: int) extern;

ghost procedure subb_inv_post_lemma(
    ghost dst: seq(uint256),
    ghost carry: uint1,
    ghost src1: seq(uint256),
    ghost src2: seq(uint256)) extern;

ghost procedure modexp_var_correct_lemma(
    ghost raw_view: nat,
    ghost adjusted_view: nat,
    ghost carry: bool,
    ghost rsa: rsa_params) extern;

function mod(a: int, n: int): int extern;

procedure write_to_dmem(ghost iter: iter_t)
    returns (ghost next_iter: iter_t)

    requires
        (x8 == 4) || (x8 == 16);

        iter_safe(iter, heap, x21);
        seq_len(iter.buff) == NUM_WORDS;
        iter.index == 0;
    
    modifies
        x8; x21; mem; heap;

    reads
        wdrs;

    ensures
        iter_inv(next_iter, heap, iter.base_ptr);
        next_iter.base_ptr == iter.base_ptr;
        seq_len(next_iter.buff) == NUM_WORDS;
        next_iter.buff == wdrs[old(x8)..old(x8)+NUM_WORDS];
        heap == old(heap)[next_iter.base_ptr := WBUFF(next_iter.buff)];
{
    ghost var start := x8;
    next_iter := iter;

    while (LoopImm(12))
        invariant
            x8 == start + next_iter.index;

            iter_inv(next_iter, heap, x21);
            next_iter.index + loop_ctr == NUM_WORDS;
            seq_len(next_iter.buff) == NUM_WORDS;

            next_iter.buff[..next_iter.index] == wdrs[start..start+next_iter.index];
            wdrs == old(wdrs);

            next_iter.base_ptr == iter.base_ptr;
            heap == old(heap)[next_iter.base_ptr := WBUFF(next_iter.buff)];

        decreases
            loop_ctr;
    {   
        ghost var index := next_iter.index;
        ghost var last_iter := next_iter;

        next_iter := bn_sid_safe(x8, false, 0, x21, true, next_iter);
        addi(x8, x8, 1);

        ghost var item := next_iter.buff[index];
        assert next_iter.buff[index] == wdrs[start+index];

        calc == {
            next_iter.buff[..next_iter.index];
            ==
            seq_append(last_iter.buff[..index], item);
            ==
            seq_append(wdrs[start..start+index], item);
            ==
            wdrs[start..start+index+1];
            ==
            wdrs[start..start+next_iter.index];
        }
    }
    next_iter := next_iter.(index := 0);
}

function mvars_init(
    vars: mvars,
    heap: heap_t,
    m_ptr: uint32,
    m0d_ptr: uint32,
    rr_ptr: uint32,
    sig_ptr: uint32,
    out_ptr: uint32) : bool extern;

procedure modexp_var_0(ghost init_vars: mvars)
    returns (ghost vars: mvars,
        ghost out_iter: iter_t)

    {:frame false}

    requires
        mvars_init(init_vars, heap, 
            x16 /* m_ptr */,
            x17 /* m0d_ptr */,
            x26 /* rr_ptr */,
            x23 /* sig_ptr */,
            x24 /* out_ptr */);

    ensures
        x9 == 3;
        x10 == 4;
        x11 == 2;

        x23 == old(x23);
        x24 == old(x24);

        w31 == 0;

        x24 != x16;
        x24 != x17;

        vars.rsa == init_vars.rsa;
        vars.sig_it == init_vars.sig_it;
        mvars_iter_init(out_iter, heap, x24, NA);
        mvars_inv(vars, heap, x24, x24, x16, x17, old(x26), x23);
        modexp_var_inv(to_nat(out_iter.buff), 0, vars.rsa);
        mvars_init(init_vars, heap, old(x16), old(x17), old(x26), x23, x24);
{
    xor_clear_lemma(w31);

    bn_xor(w31, w31, w31, SFT_DFT, 0);

    li(x8, 4);
    li(x9, 3);
    li(x10, 4);
    li(x11, 2);

    addi(x19, x23, 0);
    addi(x20, x26, 0);
    addi(x21, x24, 0);

    let sig_iter := init_vars.sig_it;
    let rr_iter := init_vars.rr_it;

    vars := init_vars.(x_it := rr_iter).(y_it := sig_iter);

    let a_view := montmul(vars);

    out_iter := iter_cons(x21, 0, heap[x21].b);
    out_iter := write_to_dmem(out_iter);

    vars := vars.(x_it := out_iter).(y_it := out_iter);
    modexp_var_inv_pre_lemma(a_view, rr_iter.buff, sig_iter.buff, vars.rsa);
}

procedure sub_mod(
    ghost raw_view: seq(uint256),
    ghost initial_m_it: iter_t)

    returns (ghost adjusted_view: seq(uint256))

    requires
        x8 == 4;
        x9 == 3;
        x11 == 2;

        w31 == 0;

        mvars_iter_init(initial_m_it, heap, x16, NA);
        valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);

    reads
        mem; heap;

    modifies
        x8; x9; x11; x16; x17;
        w2; w3; w31;
        fgroups; wdrs;

    ensures
        valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);
        valid_wdr_view(wdrs, adjusted_view, 16, NUM_WORDS);

        !fgroups.fg0.cf ==> to_nat(raw_view) - to_nat(initial_m_it.buff) == to_nat(adjusted_view);
        fgroups.fg0.cf ==> to_nat(raw_view) < to_nat(initial_m_it.buff);
{
    bn_add(w31, w31, w31, SFT_DFT, 0);
    assert fgroups.fg0.cf == false;

    li(x17, 16);
    ghost var m_it := initial_m_it;
    adjusted_view := wdrs[16..16+NUM_WORDS];

    subb_inv_pre_lemma(adjusted_view, raw_view, m_it.buff);

    while (LoopImm(12))
        invariant
            iter_inv(m_it, heap, x16);
            m_it.base_ptr == initial_m_it.base_ptr;
            m_it.index == NUM_WORDS - loop_ctr;
            seq_len(m_it.buff) == NUM_WORDS;

            x9 == 3;
            x11 == 2;
            x8 == 4 + m_it.index;
            x17 == 16 + m_it.index;

            valid_wdr_view(wdrs, raw_view, 4, NUM_WORDS);
            valid_wdr_view(wdrs, adjusted_view, 16, NUM_WORDS);

            subb_inv(adjusted_view, bool_to_uint1(fgroups.fg0.cf),
                raw_view, m_it.buff, m_it.index);

        decreases
            loop_ctr;
    {
        ghost var index := m_it.index;
        bn_movr(x11, false, x8, true);

        m_it := bn_lid_safe(x9, false, 0, x16, true, m_it);

        let old_carry := bool_to_uint1(fgroups.fg0.cf);
        bn_subb(w2, w2, w3, SFT_DFT, 0);
        let new_carry := bool_to_uint1(fgroups.fg0.cf);

        bn_movr(x17, true, x11, false);
        adjusted_view := adjusted_view[index := w2];

        // assert tuple(w2, new_carry) ==
        //     uint256_subb(raw_view[index], m_it.buff[index], old_carry);

        subb_inv_peri_lemma(adjusted_view, new_carry, raw_view, m_it.buff, old_carry, index);
    }
    
    let new_carry := bool_to_uint1(fgroups.fg0.cf);
    subb_inv_post_lemma(adjusted_view, new_carry, raw_view, m_it.buff);
}

procedure read_fg0()
    reads
        x0; fgroups;
    modifies
        x2;
    ensures
        x2 == bool_to_uint1(fgroups.fg0.cf);
{
    csrrs(x2, 0x7c0, x0);
    andi(x2, x2, 1);
    read_carry_flag_lemma(fgroups.fg0);
}

procedure modexp_var_3072_f4(
    ghost init_vars: mvars,
    ghost m_ptr: uint32,
    ghost m0d_ptr: uint32,
    ghost rr_ptr: uint32,
    ghost sig_ptr: uint32,
    ghost out_ptr: uint32)

    returns (ghost out_iter: iter_t)

    {:noInline}
    {:frame false}

    requires
        x16 == m_ptr;
        x17 == m0d_ptr;
        x26 == rr_ptr;
        x23 == sig_ptr;
        x24 == out_ptr;

        mvars_init(init_vars, heap,
            m_ptr, m0d_ptr, rr_ptr, sig_ptr, out_ptr);

        init_vars.rsa.E0 == 16;

    ensures
        mvars_init(init_vars, heap,
            m_ptr, m0d_ptr, rr_ptr, sig_ptr, out_ptr);
        // out_iter contains a valid view of memory
        iter_inv(out_iter, heap, out_ptr);
        // out_iter contains the right value
        let rsa := init_vars.rsa in 
        to_nat(out_iter.buff) == mod(Pow(rsa.SIG, rsa.E), rsa.M);
{
    ghost var vars := init_vars;
    vars, out_iter := modexp_var_0(init_vars);

    ghost var i : nat := 0;

    while (LoopImm(16))
        invariant
            x9 == 3;
            x10 == 4;
            x11 == 2;

            x23 == sig_ptr;
            x24 == out_ptr;
    
            w31 == 0;

            vars.rsa == init_vars.rsa;
            vars.sig_it == init_vars.sig_it;

            mvars_iter_init(out_iter, heap, x24, NA);
            modexp_var_inv(to_nat(out_iter.buff), i, vars.rsa);
            mvars_inv(vars, heap, x24, x24, x16, x17, rr_ptr, sig_ptr);
            mvars_init(init_vars, heap,
                m_ptr, m0d_ptr, rr_ptr, sig_ptr, out_ptr);

            out_ptr != x16;
            out_ptr != x17;

            i + loop_ctr == 16;

        decreases
            loop_ctr;
    {
        addi(x19, x24, 0);
        addi(x20, x24, 0);
        addi(x21, x24, 0);

        let prev_a_view := out_iter.buff;
        let a_view := montmul(vars);

        out_iter := write_to_dmem(out_iter);
        
        vars := vars.(x_it := out_iter).(y_it := out_iter);

        modexp_var_inv_peri_lemma(prev_a_view, a_view, i, vars.rsa);
    
        i := i + 1;
    }

    addi(x19, x23, 0);
    addi(x20, x24, 0);
    addi(x21, x24, 0);

    let prev_a_view := out_iter.buff;

    vars := vars.(x_it := out_iter).(y_it := vars.sig_it);
    let a_view := montmul(vars);

    modexp_var_inv_post_lemma(prev_a_view, a_view, vars.sig_it.buff, vars.rsa);

    ghost var raw_view := wdrs[4..4+NUM_WORDS];
    let adjusted_view := sub_mod(raw_view, vars.m_it);
    
    let carry := fgroups.fg0.cf;
    modexp_var_correct_lemma(to_nat(raw_view), to_nat(adjusted_view), carry, vars.rsa);

    read_fg0();
    li(x8, 4);

    if (x2 == x0) {
        li(x8, 16);
    }

    addi(x21, x24, 0);

    out_iter := iter_cons(x21, 0, heap[x21].b);
    out_iter := write_to_dmem(out_iter);
}


procedure modexp_var_3072_3(
    ghost init_vars: mvars,
    ghost m_ptr: uint32,
    ghost m0d_ptr: uint32,
    ghost rr_ptr: uint32,
    ghost sig_ptr: uint32,
    ghost out_ptr: uint32)

    returns (ghost out_iter: iter_t)

    {:noInline}
    {:frame false}

    requires
        x16 == m_ptr;
        x17 == m0d_ptr;
        x26 == rr_ptr;
        x23 == sig_ptr;
        x24 == out_ptr;

        mvars_init(init_vars, heap,
            m_ptr, m0d_ptr, rr_ptr, sig_ptr, out_ptr);

        init_vars.rsa.E0 == 1;

    ensures
        mvars_init(init_vars, heap,
            m_ptr, m0d_ptr, rr_ptr, sig_ptr, out_ptr);
        // out_iter contains a valid view of memory
        iter_inv(out_iter, heap, out_ptr);
        // out_iter contains the right value
        let rsa := init_vars.rsa in 
        to_nat(out_iter.buff) == mod(Pow(rsa.SIG, rsa.E), rsa.M);
{
    ghost var vars := init_vars;
    vars, out_iter := modexp_var_0(init_vars);

    addi(x19, x24, 0);
    addi(x20, x24, 0);
    addi(x21, x24, 0);

    ghost var prev_a_view := out_iter.buff;
    ghost var a_view := prev_a_view;
    a_view := montmul(vars);

    out_iter := write_to_dmem(out_iter);
    
    vars := vars.(x_it := out_iter).(y_it := out_iter);

    modexp_var_inv_peri_lemma(prev_a_view, a_view, 0, vars.rsa);

    addi(x19, x23, 0);
    addi(x20, x24, 0);
    addi(x21, x24, 0);

    prev_a_view := out_iter.buff;

    vars := vars.(x_it := out_iter).(y_it := vars.sig_it);
    a_view := montmul(vars);

    modexp_var_inv_post_lemma(prev_a_view, a_view, vars.sig_it.buff, vars.rsa);

    ghost var raw_view := wdrs[4..4+NUM_WORDS];
    let adjusted_view := sub_mod(raw_view, vars.m_it);
    
    let carry := fgroups.fg0.cf;
    modexp_var_correct_lemma(to_nat(raw_view), to_nat(adjusted_view), carry, vars.rsa);

    read_fg0();
    li(x8, 4);

    if (x2 == x0) {
        li(x8, 16);
    }

    addi(x21, x24, 0);

    out_iter := iter_cons(x21, 0, heap[x21].b);
    out_iter := write_to_dmem(out_iter);
}

#verbatim
}
#endverbatim
