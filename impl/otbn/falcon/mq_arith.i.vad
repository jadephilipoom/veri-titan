include "../../../arch/otbn/decls.i.vad"

#verbatim

include "../../../arch/otbn/decls.i.dfy"
include "../../../../lib/bv256_ntt_lemmas.i.dfy"
include "../../../../lib/falcon/otbn_lemmas.i.dfy"

module mq_arith {

import opened ot_machine
import opened ot_abstraction
import opened ot_decls
import opened ot_vale

import opened integers
import opened bv256_ops
import opened bv256_ntt_lemmas
import opened otbn_lemmas

#endverbatim
    
function mod(a: int, n: int): int extern;
ghost procedure addm_correct_lemma(ghost x: uint256, ghost y: uint256, ghost mod: uint256) extern;
ghost procedure subm_correct_lemma(ghost x: uint256, ghost y: uint256, ghost mod: uint256) extern;
    
procedure mq_add(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        src1 < wmod;
        src2 < wmod;
        wmod == NTT_PRIME;
    reads
        wmod;
    ensures
      dst == mod(old(src1) + old(src2), old(wmod));
{
    ghost var x := src1;
    ghost var y := src2;

    bn_addm(dst, src1, src2);
    addm_correct_lemma(x, y, wmod);
}
    
procedure mq_sub(inout dst: reg256, in src1: reg256, in src2: reg256)
    requires
        src1 < wmod;
        src2 < wmod;
        wmod == NTT_PRIME;
    reads
        wmod;
    ensures
      dst == mod(old(src1) - old(src2), old(wmod));
{
    ghost var x := src1;
    ghost var y := src2;

    bn_subm(dst, src1, src2);
    subm_correct_lemma(x, y, wmod);
}

#verbatim
}
#endverbatim
