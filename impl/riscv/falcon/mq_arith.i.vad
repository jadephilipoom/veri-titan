include "../../../arch/riscv/decls.i.vad"

#verbatim
include "../../../arch/riscv/decls.i.dfy"
include "../../../../lib/bv32_ntt_lemmas.i.dfy"

module mq_arith {

import opened rv_machine
import opened rv_decls
import opened rv_vale

import opened integers
import opened bv32_ops
import opened bv32_ntt_lemmas

#endverbatim
    
ghost procedure lemma_mq_add_correct(
    ghost d: uint32,
    ghost b: uint32,
    ghost c: uint32,
    ghost r: uint32,
    ghost x: nat,
    ghost y: nat) extern;

ghost procedure lemma_mq_sub_correct(
    ghost d: uint32,
    ghost b: uint32,
    ghost c: uint32,
    ghost r: uint32,
    ghost x: nat,
    ghost y: nat) extern;

ghost procedure lemma_mq_rshift1_correct(
    ghost par: uint32,
    ghost b: uint32,
    ghost c: uint32,
    ghost d: uint32,
    ghost r: uint32,
    ghost x: nat) extern;

procedure mq_add(inout r1: reg32, inout r2: reg32, in rmod: reg32) returns (ghost sum: uint32)
    requires
        r1 < NTT_PRIME;
        r2 < NTT_PRIME;
        
        @r1 != @r2;
        @rmod != @r1;
        @rmod != @r2;
    
        rmod == NTT_PRIME;
    ensures
      sum == r1;
      sum == mod(old(r1) + old(r2), NTT_PRIME);
{
    ghost var Q: int := NTT_PRIME;
    ghost var x: nat := r1;
    ghost var y: nat := r2;

    // r2 = y - Q
    sub(r2, r2, rmod);
    assert r2 == uint32_sub(to_uint32(y), to_uint32(Q));

    // r2 = y - Q + x
    add(r2, r2, r1);
    assert r2 == uint32_add(to_uint32(x), uint32_sub(to_uint32(y), to_uint32(Q)));
    ghost var d := r2;

    // r2 = d
    // r1 = d >> 31
    srai(r1, r2, 0x1f); // 31
    ghost var b := r1;

    // r1 = (Q & -(d >> 31)) + d
    and(r1, r1, rmod);
    
    // c == b & Q
    ghost var c := uint32_and(b, to_uint32(Q));
   
    add(r1, r1, r2);
    sum := r1;
    assert r1 == uint32_add(c, d);
    
    // preconditions for lemma_mq_add_correct
    lemma_mq_add_correct(d, b, c, sum, x, y);
}
    
procedure mq_sub(inout r1: reg32, inout r2: reg32, in rmod: reg32) returns (ghost diff: uint32)
    requires
        r1 < NTT_PRIME;
        r2 < NTT_PRIME;

        @r1 != @r2;
        @rmod != @r1;
        @rmod != @r2;

        rmod == NTT_PRIME;
    ensures
      diff == r1;
      diff == mod(old(r1) - old(r2), NTT_PRIME);
{
    ghost var Q: int := NTT_PRIME;
    ghost var x: nat := r1;
    ghost var y: nat := r2;
    
    // r2 == x - y;
    sub(r2, r1, r2);
    ghost var d := r2;
    
    srai(r1, r2, 0x1f);
    ghost var b := r1;

    and(r1, r1, rmod);
    ghost var c := uint32_and(b, to_uint32(Q));
    assert c == r1;

    add(r1, r1, r2);
    assert r1 == uint32_add(c, d);
    diff := r1;
    
    lemma_mq_sub_correct(d, b, c, diff, x, y);
}
    
procedure mq_rshift1(inout r1: reg32, inout r2: reg32, in rmod: reg32) returns (ghost r: uint32)
    requires
        r1 < NTT_PRIME;
        rmod == NTT_PRIME;
        
        @r1 != @rmod;
        @r2 != @rmod;
        @r1 != @r2;
    ensures
        //r == (old(r1) / 2) % NTT_PIME;
        r < NTT_PRIME;
        mod((2 * r), NTT_PRIME) == mod(old(r1), NTT_PRIME);
{
    ghost var Q: int := NTT_PRIME;
    ghost var x: nat := r1;

    andi(r2, r1, 1);
    ghost var par := r2; // 1 if x is odd
    
    neg(r2, r2); // 0 or 0xffff_ffff
    ghost var b := r2;

    and(r2, r2, rmod);
    ghost var c := uint32_and(b, to_uint32(Q));
    assert c == r2;

    add(r1, r2, r1);
    ghost var d := uint32_add(to_uint32(x), c); // x + (Q or 0)
     
    srai(r1, r1, 0x1);
    r := r1;

    lemma_mq_rshift1_correct(par, b, c, d, r, x);
}
    
#verbatim
}
#endverbatim
