include "../../arch/riscv/decls.i.vad"

#verbatim
include "../../arch/riscv/decls.i.dfy"
include "../../../lib/bv32_mm_lemmas.i.dfy"

module mul32 {

import opened integers
import opened rv_machine
import opened rv_decls
import opened rv_vale

import opened bv32_mm_lemmas


#endverbatim

// ghost procedure lemma_uint64_half_split(ghost x: nat) extern;

// function mula32_correct_lemma(
//     a: uint32, // a0
//     b: uint32, // a1
//     c: uint32, // a2
//     a0: uint32,
//     a1: uint32,
//     a5: uint32
// ) : (uint64_view_t) extern;

// function mulaa32_correct_lemma(
//        a: uint32, // a0
//        b: uint32, // a1
//        c: uint32, // a2
//        d: uint32, // a3
//        a0: uint32,
//        a1: uint32,
//        a5: uint32
// ) : (uint64_view_t) extern;

function mul32_correct_lemma(a: uint32, b: uint32, c: uint32, d: uint32): void extern;

function valid_uint64_view(num: uint64_view_t, lh: uint32, uh: uint32): bool extern;

function dw_view_lemma(num: uint64_view_t): void extern;

function mul_add_lemma(xs: seq(uint32), ys: seq(uint32),
    carry: nat, a: uint32, b: uint32): uint64_view_t extern;

function mul_double_add_lemma(xs: seq(uint32), ys: seq(uint32),
    carry: nat, a: uint32, b: uint32, c: uint32): uint64_view_t extern;

procedure mula32() returns (ghost sum: uint64_view_t)
    reads
        a2;
    modifies
        a0; a1; a5;
    ensures
        valid_uint64_view(sum, a0, a1);
        sum.full == old(a0) * old(a1) + old(a2);
{
    ghost var a := a0;
    ghost var b := a1;
    // ghost var c := a2;
   
    // bottom half of a0 * a1 in a5 
    mul(a5, a0, a1);
    
    // top half of a0 * a1 in a1
    mulhu(a1, a0, a1);

    mul32_correct_lemma(a, b, a5, a1);
    let x_lh := a5;
    let x_uh := a1;

    // bottom half + a2 value in a0
    add(a0, a5, a2);

    // if a0 now less than a5 it's because we overflowed
    // so we need to add 1 to a1
    sltu(a5, a0, a5);
    let c1 := a5;
    
    // add 1 to top half if needed
    add(a1, a1, a5);

    sum := mul_add_lemma(seq(x_lh, x_uh), seq(a2, 0), c1, a, b);
}

procedure mulaa32() returns (ghost sum: uint64_view_t)
    modifies
        a0; a1; a2; a3; a5;
    ensures
        valid_uint64_view(sum, a0, a1);
        sum.full == old(a0) * old(a1) + old(a2) + old(a3);
{
    ghost var a := a0;
    ghost var b := a1;
    ghost var c := a2;
    ghost var d := a3;

    sum := mula32();
    let x_lh := a0;
    let x_uh := a1;

    dw_view_lemma(sum);

    add(a0, a0, a3);
    sltu(a5, a0, a3);
    let c1 := a5;

    add(a1, a1, a5);

    sum := mul_double_add_lemma(seq(x_lh, x_uh), seq(d, 0), c1, a, b, c);
}

#verbatim
}
#endverbatim
